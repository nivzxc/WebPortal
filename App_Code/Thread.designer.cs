#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MySTIHQ110523")]
public partial class ThreadDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertThread(Thread instance);
  partial void UpdateThread(Thread instance);
  partial void DeleteThread(Thread instance);
  partial void InsertThreadCategory(ThreadCategory instance);
  partial void UpdateThreadCategory(ThreadCategory instance);
  partial void DeleteThreadCategory(ThreadCategory instance);
  partial void InsertThreadGroup(ThreadGroup instance);
  partial void UpdateThreadGroup(ThreadGroup instance);
  partial void DeleteThreadGroup(ThreadGroup instance);
  partial void InsertThreadReply(ThreadReply instance);
  partial void UpdateThreadReply(ThreadReply instance);
  partial void DeleteThreadReply(ThreadReply instance);
  partial void InsertThreadTypesUser(ThreadTypesUser instance);
  partial void UpdateThreadTypesUser(ThreadTypesUser instance);
  partial void DeleteThreadTypesUser(ThreadTypesUser instance);
  partial void InsertThreadPrivateUser(ThreadPrivateUser instance);
  partial void UpdateThreadPrivateUser(ThreadPrivateUser instance);
  partial void DeleteThreadPrivateUser(ThreadPrivateUser instance);
  partial void InsertThreadView(ThreadView instance);
  partial void UpdateThreadView(ThreadView instance);
  partial void DeleteThreadView(ThreadView instance);
  partial void InsertThreadType(ThreadType instance);
  partial void UpdateThreadType(ThreadType instance);
  partial void DeleteThreadType(ThreadType instance);
  #endregion
	
	public ThreadDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MySTIHQ110523ConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public ThreadDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ThreadDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ThreadDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ThreadDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<Employee> Employees
	{
		get
		{
			return this.GetTable<Employee>();
		}
	}
	
	public System.Data.Linq.Table<Thread> Threads
	{
		get
		{
			return this.GetTable<Thread>();
		}
	}
	
	public System.Data.Linq.Table<ThreadCategory> ThreadCategories
	{
		get
		{
			return this.GetTable<ThreadCategory>();
		}
	}
	
	public System.Data.Linq.Table<ThreadGroup> ThreadGroups
	{
		get
		{
			return this.GetTable<ThreadGroup>();
		}
	}
	
	public System.Data.Linq.Table<ThreadReply> ThreadReplies
	{
		get
		{
			return this.GetTable<ThreadReply>();
		}
	}
	
	public System.Data.Linq.Table<ThreadTypesUser> ThreadTypesUsers
	{
		get
		{
			return this.GetTable<ThreadTypesUser>();
		}
	}
	
	public System.Data.Linq.Table<ThreadPrivateUser> ThreadPrivateUsers
	{
		get
		{
			return this.GetTable<ThreadPrivateUser>();
		}
	}
	
	public System.Data.Linq.Table<ThreadView> ThreadViews
	{
		get
		{
			return this.GetTable<ThreadView>();
		}
	}
	
	public System.Data.Linq.Table<ThreadType> ThreadTypes
	{
		get
		{
			return this.GetTable<ThreadType>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Users.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _username;
	
	private string _pword;
	
	private string _lastname;
	
	private string _firname;
	
	private string _midname;
	
	private string _nickname;
	
	private string _email;
	
	private System.Nullable<System.DateTime> _brthdate;
	
	private string _emptitle;
	
	private System.Nullable<char> _gender;
	
	private System.Nullable<char> _online;
	
	private System.Nullable<System.DateTime> _lastlog;
	
	private System.Nullable<char> _userclss;
	
	private System.Nullable<char> _pstatus;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpwordChanging(string value);
    partial void OnpwordChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnfirnameChanging(string value);
    partial void OnfirnameChanged();
    partial void OnmidnameChanging(string value);
    partial void OnmidnameChanged();
    partial void OnnicknameChanging(string value);
    partial void OnnicknameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnbrthdateChanging(System.Nullable<System.DateTime> value);
    partial void OnbrthdateChanged();
    partial void OnemptitleChanging(string value);
    partial void OnemptitleChanged();
    partial void OngenderChanging(System.Nullable<char> value);
    partial void OngenderChanged();
    partial void OnonlineChanging(System.Nullable<char> value);
    partial void OnonlineChanged();
    partial void OnlastlogChanging(System.Nullable<System.DateTime> value);
    partial void OnlastlogChanged();
    partial void OnuserclssChanging(System.Nullable<char> value);
    partial void OnuserclssChanged();
    partial void OnpstatusChanging(System.Nullable<char> value);
    partial void OnpstatusChanged();
    #endregion
	
	public User()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string username
	{
		get
		{
			return this._username;
		}
		set
		{
			if ((this._username != value))
			{
				this.OnusernameChanging(value);
				this.SendPropertyChanging();
				this._username = value;
				this.SendPropertyChanged("username");
				this.OnusernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pword", DbType="VarChar(15)")]
	public string pword
	{
		get
		{
			return this._pword;
		}
		set
		{
			if ((this._pword != value))
			{
				this.OnpwordChanging(value);
				this.SendPropertyChanging();
				this._pword = value;
				this.SendPropertyChanged("pword");
				this.OnpwordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="VarChar(30)")]
	public string lastname
	{
		get
		{
			return this._lastname;
		}
		set
		{
			if ((this._lastname != value))
			{
				this.OnlastnameChanging(value);
				this.SendPropertyChanging();
				this._lastname = value;
				this.SendPropertyChanged("lastname");
				this.OnlastnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firname", DbType="VarChar(30)")]
	public string firname
	{
		get
		{
			return this._firname;
		}
		set
		{
			if ((this._firname != value))
			{
				this.OnfirnameChanging(value);
				this.SendPropertyChanging();
				this._firname = value;
				this.SendPropertyChanged("firname");
				this.OnfirnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_midname", DbType="VarChar(30)")]
	public string midname
	{
		get
		{
			return this._midname;
		}
		set
		{
			if ((this._midname != value))
			{
				this.OnmidnameChanging(value);
				this.SendPropertyChanging();
				this._midname = value;
				this.SendPropertyChanged("midname");
				this.OnmidnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nickname", DbType="VarChar(20)")]
	public string nickname
	{
		get
		{
			return this._nickname;
		}
		set
		{
			if ((this._nickname != value))
			{
				this.OnnicknameChanging(value);
				this.SendPropertyChanging();
				this._nickname = value;
				this.SendPropertyChanged("nickname");
				this.OnnicknameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
	public string email
	{
		get
		{
			return this._email;
		}
		set
		{
			if ((this._email != value))
			{
				this.OnemailChanging(value);
				this.SendPropertyChanging();
				this._email = value;
				this.SendPropertyChanged("email");
				this.OnemailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brthdate", DbType="DateTime")]
	public System.Nullable<System.DateTime> brthdate
	{
		get
		{
			return this._brthdate;
		}
		set
		{
			if ((this._brthdate != value))
			{
				this.OnbrthdateChanging(value);
				this.SendPropertyChanging();
				this._brthdate = value;
				this.SendPropertyChanged("brthdate");
				this.OnbrthdateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emptitle", DbType="VarChar(150)")]
	public string emptitle
	{
		get
		{
			return this._emptitle;
		}
		set
		{
			if ((this._emptitle != value))
			{
				this.OnemptitleChanging(value);
				this.SendPropertyChanging();
				this._emptitle = value;
				this.SendPropertyChanged("emptitle");
				this.OnemptitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="Char(1)")]
	public System.Nullable<char> gender
	{
		get
		{
			return this._gender;
		}
		set
		{
			if ((this._gender != value))
			{
				this.OngenderChanging(value);
				this.SendPropertyChanging();
				this._gender = value;
				this.SendPropertyChanged("gender");
				this.OngenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_online", DbType="Char(1)")]
	public System.Nullable<char> online
	{
		get
		{
			return this._online;
		}
		set
		{
			if ((this._online != value))
			{
				this.OnonlineChanging(value);
				this.SendPropertyChanging();
				this._online = value;
				this.SendPropertyChanged("online");
				this.OnonlineChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastlog", DbType="DateTime")]
	public System.Nullable<System.DateTime> lastlog
	{
		get
		{
			return this._lastlog;
		}
		set
		{
			if ((this._lastlog != value))
			{
				this.OnlastlogChanging(value);
				this.SendPropertyChanging();
				this._lastlog = value;
				this.SendPropertyChanged("lastlog");
				this.OnlastlogChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userclss", DbType="Char(1)")]
	public System.Nullable<char> userclss
	{
		get
		{
			return this._userclss;
		}
		set
		{
			if ((this._userclss != value))
			{
				this.OnuserclssChanging(value);
				this.SendPropertyChanging();
				this._userclss = value;
				this.SendPropertyChanged("userclss");
				this.OnuserclssChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pstatus", DbType="Char(1)")]
	public System.Nullable<char> pstatus
	{
		get
		{
			return this._pstatus;
		}
		set
		{
			if ((this._pstatus != value))
			{
				this.OnpstatusChanging(value);
				this.SendPropertyChanging();
				this._pstatus = value;
				this.SendPropertyChanged("pstatus");
				this.OnpstatusChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="HR.Employees")]
public partial class Employee
{
	
	private string _username;
	
	private System.Data.Linq.Binary _pimage;
	
	private string _empnum;
	
	private string _lastname;
	
	private string _firname;
	
	private string _midname;
	
	private string _midintl;
	
	private string _nickname;
	
	private System.Nullable<System.DateTime> _brthdate;
	
	private System.Nullable<char> _gender;
	
	private string _etypcode;
	
	private string _esttcode;
	
	private string _title;
	
	private string _suffix;
	
	private string _comcode;
	
	private string _position;
	
	private string _remarks;
	
	private string _emername;
	
	private string _emerrltn;
	
	private string _emeraddr;
	
	private string _emerphon;
	
	private string _emercell;
	
	private string _brthplac;
	
	private string _citizen;
	
	private string _height;
	
	private string _weigth;
	
	private string _bloodtyp;
	
	private string _hobbies;
	
	private string _langspok;
	
	private string _cstatus;
	
	private string _fthrname;
	
	private System.Nullable<System.DateTime> _fthrdbrt;
	
	private string _mthrname;
	
	private System.Nullable<System.DateTime> _mthrdbrt;
	
	private string _spsename;
	
	private System.Nullable<System.DateTime> _spsedbrt;
	
	private string _permaddr;
	
	private string _permcity;
	
	private string _permphon;
	
	private string _curraddr;
	
	private string _currcity;
	
	private string _currphon;
	
	private string _primmobl;
	
	private string _altrmobl;
	
	private string _drctnmbr;
	
	private string _lcalnmbr;
	
	private string _faxnmbr;
	
	private string _emailofc;
	
	private string _emailper;
	
	private string _schdcode;
	
	private string _sssid;
	
	private string _philid;
	
	private string _taxid;
	
	private string _hdmfid;
	
	private string _hmoid;
	
	private string _bankacct;
	
	private string _divicode;
	
	private string _grpcode;
	
	private string _deptcode;
	
	private string _rccode;
	
	private string _jgcode;
	
	private string _assgnmnt;
	
	private System.Nullable<System.DateTime> _datestrt;
	
	private System.Nullable<System.DateTime> _datereg;
	
	private System.Nullable<System.DateTime> _dateend;
	
	private string _updateby;
	
	private System.Nullable<System.DateTime> _updateon;
	
	private string _skillpri;
	
	private string _skillsec;
	
	private System.Nullable<char> _proctime;
	
	private System.Nullable<char> _pstatus;
	
	private System.Nullable<char> _billable;
	
	private string _rsgncode;
	
	private string _rsgnrmks;
	
	private System.Nullable<char> _rsgndsrd;
	
	private string _rsrccode;
	
	private string _rsrcrmks;
	
	public Employee()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string username
	{
		get
		{
			return this._username;
		}
		set
		{
			if ((this._username != value))
			{
				this._username = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pimage", DbType="Image", UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary pimage
	{
		get
		{
			return this._pimage;
		}
		set
		{
			if ((this._pimage != value))
			{
				this._pimage = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empnum", DbType="VarChar(5)")]
	public string empnum
	{
		get
		{
			return this._empnum;
		}
		set
		{
			if ((this._empnum != value))
			{
				this._empnum = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="VarChar(30)")]
	public string lastname
	{
		get
		{
			return this._lastname;
		}
		set
		{
			if ((this._lastname != value))
			{
				this._lastname = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firname", DbType="VarChar(30)")]
	public string firname
	{
		get
		{
			return this._firname;
		}
		set
		{
			if ((this._firname != value))
			{
				this._firname = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_midname", DbType="VarChar(30)")]
	public string midname
	{
		get
		{
			return this._midname;
		}
		set
		{
			if ((this._midname != value))
			{
				this._midname = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_midintl", DbType="VarChar(2)")]
	public string midintl
	{
		get
		{
			return this._midintl;
		}
		set
		{
			if ((this._midintl != value))
			{
				this._midintl = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nickname", DbType="VarChar(30)")]
	public string nickname
	{
		get
		{
			return this._nickname;
		}
		set
		{
			if ((this._nickname != value))
			{
				this._nickname = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brthdate", DbType="DateTime")]
	public System.Nullable<System.DateTime> brthdate
	{
		get
		{
			return this._brthdate;
		}
		set
		{
			if ((this._brthdate != value))
			{
				this._brthdate = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="Char(1)")]
	public System.Nullable<char> gender
	{
		get
		{
			return this._gender;
		}
		set
		{
			if ((this._gender != value))
			{
				this._gender = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_etypcode", DbType="Char(2)")]
	public string etypcode
	{
		get
		{
			return this._etypcode;
		}
		set
		{
			if ((this._etypcode != value))
			{
				this._etypcode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_esttcode", DbType="Char(2)")]
	public string esttcode
	{
		get
		{
			return this._esttcode;
		}
		set
		{
			if ((this._esttcode != value))
			{
				this._esttcode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(20)")]
	public string title
	{
		get
		{
			return this._title;
		}
		set
		{
			if ((this._title != value))
			{
				this._title = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_suffix", DbType="VarChar(20)")]
	public string suffix
	{
		get
		{
			return this._suffix;
		}
		set
		{
			if ((this._suffix != value))
			{
				this._suffix = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comcode", DbType="VarChar(10)")]
	public string comcode
	{
		get
		{
			return this._comcode;
		}
		set
		{
			if ((this._comcode != value))
			{
				this._comcode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="VarChar(150)")]
	public string position
	{
		get
		{
			return this._position;
		}
		set
		{
			if ((this._position != value))
			{
				this._position = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remarks", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string remarks
	{
		get
		{
			return this._remarks;
		}
		set
		{
			if ((this._remarks != value))
			{
				this._remarks = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emername", DbType="VarChar(100)")]
	public string emername
	{
		get
		{
			return this._emername;
		}
		set
		{
			if ((this._emername != value))
			{
				this._emername = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emerrltn", DbType="VarChar(20)")]
	public string emerrltn
	{
		get
		{
			return this._emerrltn;
		}
		set
		{
			if ((this._emerrltn != value))
			{
				this._emerrltn = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emeraddr", DbType="VarChar(100)")]
	public string emeraddr
	{
		get
		{
			return this._emeraddr;
		}
		set
		{
			if ((this._emeraddr != value))
			{
				this._emeraddr = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emerphon", DbType="VarChar(50)")]
	public string emerphon
	{
		get
		{
			return this._emerphon;
		}
		set
		{
			if ((this._emerphon != value))
			{
				this._emerphon = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emercell", DbType="VarChar(50)")]
	public string emercell
	{
		get
		{
			return this._emercell;
		}
		set
		{
			if ((this._emercell != value))
			{
				this._emercell = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brthplac", DbType="VarChar(50)")]
	public string brthplac
	{
		get
		{
			return this._brthplac;
		}
		set
		{
			if ((this._brthplac != value))
			{
				this._brthplac = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_citizen", DbType="VarChar(30)")]
	public string citizen
	{
		get
		{
			return this._citizen;
		}
		set
		{
			if ((this._citizen != value))
			{
				this._citizen = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_height", DbType="VarChar(10)")]
	public string height
	{
		get
		{
			return this._height;
		}
		set
		{
			if ((this._height != value))
			{
				this._height = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weigth", DbType="VarChar(10)")]
	public string weigth
	{
		get
		{
			return this._weigth;
		}
		set
		{
			if ((this._weigth != value))
			{
				this._weigth = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bloodtyp", DbType="VarChar(2)")]
	public string bloodtyp
	{
		get
		{
			return this._bloodtyp;
		}
		set
		{
			if ((this._bloodtyp != value))
			{
				this._bloodtyp = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hobbies", DbType="VarChar(255)")]
	public string hobbies
	{
		get
		{
			return this._hobbies;
		}
		set
		{
			if ((this._hobbies != value))
			{
				this._hobbies = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_langspok", DbType="VarChar(100)")]
	public string langspok
	{
		get
		{
			return this._langspok;
		}
		set
		{
			if ((this._langspok != value))
			{
				this._langspok = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cstatus", DbType="VarChar(1)")]
	public string cstatus
	{
		get
		{
			return this._cstatus;
		}
		set
		{
			if ((this._cstatus != value))
			{
				this._cstatus = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fthrname", DbType="VarChar(50)")]
	public string fthrname
	{
		get
		{
			return this._fthrname;
		}
		set
		{
			if ((this._fthrname != value))
			{
				this._fthrname = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fthrdbrt", DbType="DateTime")]
	public System.Nullable<System.DateTime> fthrdbrt
	{
		get
		{
			return this._fthrdbrt;
		}
		set
		{
			if ((this._fthrdbrt != value))
			{
				this._fthrdbrt = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mthrname", DbType="VarChar(50)")]
	public string mthrname
	{
		get
		{
			return this._mthrname;
		}
		set
		{
			if ((this._mthrname != value))
			{
				this._mthrname = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mthrdbrt", DbType="DateTime")]
	public System.Nullable<System.DateTime> mthrdbrt
	{
		get
		{
			return this._mthrdbrt;
		}
		set
		{
			if ((this._mthrdbrt != value))
			{
				this._mthrdbrt = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_spsename", DbType="VarChar(50)")]
	public string spsename
	{
		get
		{
			return this._spsename;
		}
		set
		{
			if ((this._spsename != value))
			{
				this._spsename = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_spsedbrt", DbType="DateTime")]
	public System.Nullable<System.DateTime> spsedbrt
	{
		get
		{
			return this._spsedbrt;
		}
		set
		{
			if ((this._spsedbrt != value))
			{
				this._spsedbrt = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_permaddr", DbType="VarChar(100)")]
	public string permaddr
	{
		get
		{
			return this._permaddr;
		}
		set
		{
			if ((this._permaddr != value))
			{
				this._permaddr = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_permcity", DbType="VarChar(30)")]
	public string permcity
	{
		get
		{
			return this._permcity;
		}
		set
		{
			if ((this._permcity != value))
			{
				this._permcity = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_permphon", DbType="VarChar(20)")]
	public string permphon
	{
		get
		{
			return this._permphon;
		}
		set
		{
			if ((this._permphon != value))
			{
				this._permphon = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_curraddr", DbType="VarChar(100)")]
	public string curraddr
	{
		get
		{
			return this._curraddr;
		}
		set
		{
			if ((this._curraddr != value))
			{
				this._curraddr = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currcity", DbType="VarChar(30)")]
	public string currcity
	{
		get
		{
			return this._currcity;
		}
		set
		{
			if ((this._currcity != value))
			{
				this._currcity = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currphon", DbType="VarChar(20)")]
	public string currphon
	{
		get
		{
			return this._currphon;
		}
		set
		{
			if ((this._currphon != value))
			{
				this._currphon = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_primmobl", DbType="VarChar(20)")]
	public string primmobl
	{
		get
		{
			return this._primmobl;
		}
		set
		{
			if ((this._primmobl != value))
			{
				this._primmobl = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_altrmobl", DbType="VarChar(20)")]
	public string altrmobl
	{
		get
		{
			return this._altrmobl;
		}
		set
		{
			if ((this._altrmobl != value))
			{
				this._altrmobl = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drctnmbr", DbType="VarChar(20)")]
	public string drctnmbr
	{
		get
		{
			return this._drctnmbr;
		}
		set
		{
			if ((this._drctnmbr != value))
			{
				this._drctnmbr = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lcalnmbr", DbType="VarChar(4)")]
	public string lcalnmbr
	{
		get
		{
			return this._lcalnmbr;
		}
		set
		{
			if ((this._lcalnmbr != value))
			{
				this._lcalnmbr = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_faxnmbr", DbType="VarChar(20)")]
	public string faxnmbr
	{
		get
		{
			return this._faxnmbr;
		}
		set
		{
			if ((this._faxnmbr != value))
			{
				this._faxnmbr = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailofc", DbType="VarChar(40)")]
	public string emailofc
	{
		get
		{
			return this._emailofc;
		}
		set
		{
			if ((this._emailofc != value))
			{
				this._emailofc = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailper", DbType="VarChar(40)")]
	public string emailper
	{
		get
		{
			return this._emailper;
		}
		set
		{
			if ((this._emailper != value))
			{
				this._emailper = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schdcode", DbType="Char(3)")]
	public string schdcode
	{
		get
		{
			return this._schdcode;
		}
		set
		{
			if ((this._schdcode != value))
			{
				this._schdcode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sssid", DbType="VarChar(12)")]
	public string sssid
	{
		get
		{
			return this._sssid;
		}
		set
		{
			if ((this._sssid != value))
			{
				this._sssid = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_philid", DbType="VarChar(20)")]
	public string philid
	{
		get
		{
			return this._philid;
		}
		set
		{
			if ((this._philid != value))
			{
				this._philid = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taxid", DbType="VarChar(11)")]
	public string taxid
	{
		get
		{
			return this._taxid;
		}
		set
		{
			if ((this._taxid != value))
			{
				this._taxid = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hdmfid", DbType="VarChar(20)")]
	public string hdmfid
	{
		get
		{
			return this._hdmfid;
		}
		set
		{
			if ((this._hdmfid != value))
			{
				this._hdmfid = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hmoid", DbType="VarChar(20)")]
	public string hmoid
	{
		get
		{
			return this._hmoid;
		}
		set
		{
			if ((this._hmoid != value))
			{
				this._hmoid = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bankacct", DbType="VarChar(30)")]
	public string bankacct
	{
		get
		{
			return this._bankacct;
		}
		set
		{
			if ((this._bankacct != value))
			{
				this._bankacct = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_divicode", DbType="Char(6)")]
	public string divicode
	{
		get
		{
			return this._divicode;
		}
		set
		{
			if ((this._divicode != value))
			{
				this._divicode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grpcode", DbType="Char(2)")]
	public string grpcode
	{
		get
		{
			return this._grpcode;
		}
		set
		{
			if ((this._grpcode != value))
			{
				this._grpcode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deptcode", DbType="Char(3)")]
	public string deptcode
	{
		get
		{
			return this._deptcode;
		}
		set
		{
			if ((this._deptcode != value))
			{
				this._deptcode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rccode", DbType="Char(3)")]
	public string rccode
	{
		get
		{
			return this._rccode;
		}
		set
		{
			if ((this._rccode != value))
			{
				this._rccode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jgcode", DbType="VarChar(3)")]
	public string jgcode
	{
		get
		{
			return this._jgcode;
		}
		set
		{
			if ((this._jgcode != value))
			{
				this._jgcode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assgnmnt", DbType="VarChar(30)")]
	public string assgnmnt
	{
		get
		{
			return this._assgnmnt;
		}
		set
		{
			if ((this._assgnmnt != value))
			{
				this._assgnmnt = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datestrt", DbType="DateTime")]
	public System.Nullable<System.DateTime> datestrt
	{
		get
		{
			return this._datestrt;
		}
		set
		{
			if ((this._datestrt != value))
			{
				this._datestrt = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datereg", DbType="DateTime")]
	public System.Nullable<System.DateTime> datereg
	{
		get
		{
			return this._datereg;
		}
		set
		{
			if ((this._datereg != value))
			{
				this._datereg = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateend", DbType="DateTime")]
	public System.Nullable<System.DateTime> dateend
	{
		get
		{
			return this._dateend;
		}
		set
		{
			if ((this._dateend != value))
			{
				this._dateend = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updateby", DbType="VarChar(30)")]
	public string updateby
	{
		get
		{
			return this._updateby;
		}
		set
		{
			if ((this._updateby != value))
			{
				this._updateby = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updateon", DbType="DateTime")]
	public System.Nullable<System.DateTime> updateon
	{
		get
		{
			return this._updateon;
		}
		set
		{
			if ((this._updateon != value))
			{
				this._updateon = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_skillpri", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string skillpri
	{
		get
		{
			return this._skillpri;
		}
		set
		{
			if ((this._skillpri != value))
			{
				this._skillpri = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_skillsec", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string skillsec
	{
		get
		{
			return this._skillsec;
		}
		set
		{
			if ((this._skillsec != value))
			{
				this._skillsec = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_proctime", DbType="Char(1)")]
	public System.Nullable<char> proctime
	{
		get
		{
			return this._proctime;
		}
		set
		{
			if ((this._proctime != value))
			{
				this._proctime = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pstatus", DbType="Char(1)")]
	public System.Nullable<char> pstatus
	{
		get
		{
			return this._pstatus;
		}
		set
		{
			if ((this._pstatus != value))
			{
				this._pstatus = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_billable", DbType="Char(1)")]
	public System.Nullable<char> billable
	{
		get
		{
			return this._billable;
		}
		set
		{
			if ((this._billable != value))
			{
				this._billable = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rsgncode", DbType="Char(3)")]
	public string rsgncode
	{
		get
		{
			return this._rsgncode;
		}
		set
		{
			if ((this._rsgncode != value))
			{
				this._rsgncode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rsgnrmks", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string rsgnrmks
	{
		get
		{
			return this._rsgnrmks;
		}
		set
		{
			if ((this._rsgnrmks != value))
			{
				this._rsgnrmks = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rsgndsrd", DbType="Char(1)")]
	public System.Nullable<char> rsgndsrd
	{
		get
		{
			return this._rsgndsrd;
		}
		set
		{
			if ((this._rsgndsrd != value))
			{
				this._rsgndsrd = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rsrccode", DbType="Char(3)")]
	public string rsrccode
	{
		get
		{
			return this._rsrccode;
		}
		set
		{
			if ((this._rsrccode != value))
			{
				this._rsrccode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rsrcrmks", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string rsrcrmks
	{
		get
		{
			return this._rsrcrmks;
		}
		set
		{
			if ((this._rsrcrmks != value))
			{
				this._rsrcrmks = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.Threads")]
public partial class Thread : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ThreadID;
	
	private System.Nullable<int> _ThreadCategoryID;
	
	private System.Nullable<int> _ThreadTypeID;
	
	private string _Title;
	
	private string _Description;
	
	private string _Contents;
	
	private System.Nullable<bool> _IsAllowedReply;
	
	private System.Nullable<bool> _IsPosted;
	
	private System.Nullable<bool> _IsPrivate;
	
	private System.Nullable<bool> _IsActive;
	
	private System.Nullable<bool> _IsSticky;
	
	private string _PostedBy;
	
	private System.Nullable<System.DateTime> _PostedDate;
	
	private string _LastPostBy;
	
	private System.Nullable<System.DateTime> _LastPostDate;
	
	private System.Nullable<int> _TotalReply;
	
	private string _AttachedFileDescription;
	
	private string _AttachedFileName;
	
	private EntitySet<ThreadReply> _ThreadReplies;
	
	private EntitySet<ThreadPrivateUser> _ThreadPrivateUsers;
	
	private EntityRef<ThreadCategory> _ThreadCategory;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadIDChanging(int value);
    partial void OnThreadIDChanged();
    partial void OnThreadCategoryIDChanging(System.Nullable<int> value);
    partial void OnThreadCategoryIDChanged();
    partial void OnThreadTypeIDChanging(System.Nullable<int> value);
    partial void OnThreadTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnIsAllowedReplyChanging(System.Nullable<bool> value);
    partial void OnIsAllowedReplyChanged();
    partial void OnIsPostedChanging(System.Nullable<bool> value);
    partial void OnIsPostedChanged();
    partial void OnIsPrivateChanging(System.Nullable<bool> value);
    partial void OnIsPrivateChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnIsStickyChanging(System.Nullable<bool> value);
    partial void OnIsStickyChanged();
    partial void OnPostedByChanging(string value);
    partial void OnPostedByChanged();
    partial void OnPostedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostedDateChanged();
    partial void OnLastPostByChanging(string value);
    partial void OnLastPostByChanged();
    partial void OnLastPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPostDateChanged();
    partial void OnTotalReplyChanging(System.Nullable<int> value);
    partial void OnTotalReplyChanged();
    partial void OnAttachedFileDescriptionChanging(string value);
    partial void OnAttachedFileDescriptionChanged();
    partial void OnAttachedFileNameChanging(string value);
    partial void OnAttachedFileNameChanged();
    #endregion
	
	public Thread()
	{
		this._ThreadReplies = new EntitySet<ThreadReply>(new Action<ThreadReply>(this.attach_ThreadReplies), new Action<ThreadReply>(this.detach_ThreadReplies));
		this._ThreadPrivateUsers = new EntitySet<ThreadPrivateUser>(new Action<ThreadPrivateUser>(this.attach_ThreadPrivateUsers), new Action<ThreadPrivateUser>(this.detach_ThreadPrivateUsers));
		this._ThreadCategory = default(EntityRef<ThreadCategory>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ThreadID
	{
		get
		{
			return this._ThreadID;
		}
		set
		{
			if ((this._ThreadID != value))
			{
				this.OnThreadIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadID = value;
				this.SendPropertyChanged("ThreadID");
				this.OnThreadIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadCategoryID", DbType="Int")]
	public System.Nullable<int> ThreadCategoryID
	{
		get
		{
			return this._ThreadCategoryID;
		}
		set
		{
			if ((this._ThreadCategoryID != value))
			{
				if (this._ThreadCategory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnThreadCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadCategoryID = value;
				this.SendPropertyChanged("ThreadCategoryID");
				this.OnThreadCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadTypeID", DbType="Int")]
	public System.Nullable<int> ThreadTypeID
	{
		get
		{
			return this._ThreadTypeID;
		}
		set
		{
			if ((this._ThreadTypeID != value))
			{
				this.OnThreadTypeIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadTypeID = value;
				this.SendPropertyChanged("ThreadTypeID");
				this.OnThreadTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string Contents
	{
		get
		{
			return this._Contents;
		}
		set
		{
			if ((this._Contents != value))
			{
				this.OnContentsChanging(value);
				this.SendPropertyChanging();
				this._Contents = value;
				this.SendPropertyChanged("Contents");
				this.OnContentsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAllowedReply", DbType="Bit")]
	public System.Nullable<bool> IsAllowedReply
	{
		get
		{
			return this._IsAllowedReply;
		}
		set
		{
			if ((this._IsAllowedReply != value))
			{
				this.OnIsAllowedReplyChanging(value);
				this.SendPropertyChanging();
				this._IsAllowedReply = value;
				this.SendPropertyChanged("IsAllowedReply");
				this.OnIsAllowedReplyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPosted", DbType="Bit")]
	public System.Nullable<bool> IsPosted
	{
		get
		{
			return this._IsPosted;
		}
		set
		{
			if ((this._IsPosted != value))
			{
				this.OnIsPostedChanging(value);
				this.SendPropertyChanging();
				this._IsPosted = value;
				this.SendPropertyChanged("IsPosted");
				this.OnIsPostedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrivate", DbType="Bit")]
	public System.Nullable<bool> IsPrivate
	{
		get
		{
			return this._IsPrivate;
		}
		set
		{
			if ((this._IsPrivate != value))
			{
				this.OnIsPrivateChanging(value);
				this.SendPropertyChanging();
				this._IsPrivate = value;
				this.SendPropertyChanged("IsPrivate");
				this.OnIsPrivateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSticky", DbType="Bit")]
	public System.Nullable<bool> IsSticky
	{
		get
		{
			return this._IsSticky;
		}
		set
		{
			if ((this._IsSticky != value))
			{
				this.OnIsStickyChanging(value);
				this.SendPropertyChanging();
				this._IsSticky = value;
				this.SendPropertyChanged("IsSticky");
				this.OnIsStickyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostedBy", DbType="VarChar(30)")]
	public string PostedBy
	{
		get
		{
			return this._PostedBy;
		}
		set
		{
			if ((this._PostedBy != value))
			{
				this.OnPostedByChanging(value);
				this.SendPropertyChanging();
				this._PostedBy = value;
				this.SendPropertyChanged("PostedBy");
				this.OnPostedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> PostedDate
	{
		get
		{
			return this._PostedDate;
		}
		set
		{
			if ((this._PostedDate != value))
			{
				this.OnPostedDateChanging(value);
				this.SendPropertyChanging();
				this._PostedDate = value;
				this.SendPropertyChanged("PostedDate");
				this.OnPostedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPostBy", DbType="VarChar(30)")]
	public string LastPostBy
	{
		get
		{
			return this._LastPostBy;
		}
		set
		{
			if ((this._LastPostBy != value))
			{
				this.OnLastPostByChanging(value);
				this.SendPropertyChanging();
				this._LastPostBy = value;
				this.SendPropertyChanged("LastPostBy");
				this.OnLastPostByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPostDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> LastPostDate
	{
		get
		{
			return this._LastPostDate;
		}
		set
		{
			if ((this._LastPostDate != value))
			{
				this.OnLastPostDateChanging(value);
				this.SendPropertyChanging();
				this._LastPostDate = value;
				this.SendPropertyChanged("LastPostDate");
				this.OnLastPostDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalReply", DbType="Int")]
	public System.Nullable<int> TotalReply
	{
		get
		{
			return this._TotalReply;
		}
		set
		{
			if ((this._TotalReply != value))
			{
				this.OnTotalReplyChanging(value);
				this.SendPropertyChanging();
				this._TotalReply = value;
				this.SendPropertyChanged("TotalReply");
				this.OnTotalReplyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachedFileDescription", DbType="VarChar(50)")]
	public string AttachedFileDescription
	{
		get
		{
			return this._AttachedFileDescription;
		}
		set
		{
			if ((this._AttachedFileDescription != value))
			{
				this.OnAttachedFileDescriptionChanging(value);
				this.SendPropertyChanging();
				this._AttachedFileDescription = value;
				this.SendPropertyChanged("AttachedFileDescription");
				this.OnAttachedFileDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachedFileName", DbType="VarChar(100)")]
	public string AttachedFileName
	{
		get
		{
			return this._AttachedFileName;
		}
		set
		{
			if ((this._AttachedFileName != value))
			{
				this.OnAttachedFileNameChanging(value);
				this.SendPropertyChanging();
				this._AttachedFileName = value;
				this.SendPropertyChanged("AttachedFileName");
				this.OnAttachedFileNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_ThreadReply", Storage="_ThreadReplies", ThisKey="ThreadID", OtherKey="ThreadID")]
	public EntitySet<ThreadReply> ThreadReplies
	{
		get
		{
			return this._ThreadReplies;
		}
		set
		{
			this._ThreadReplies.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_ThreadPrivateUser", Storage="_ThreadPrivateUsers", ThisKey="ThreadID", OtherKey="ThreadID")]
	public EntitySet<ThreadPrivateUser> ThreadPrivateUsers
	{
		get
		{
			return this._ThreadPrivateUsers;
		}
		set
		{
			this._ThreadPrivateUsers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThreadCategory_Thread", Storage="_ThreadCategory", ThisKey="ThreadCategoryID", OtherKey="ThreadCategoryID", IsForeignKey=true)]
	public ThreadCategory ThreadCategory
	{
		get
		{
			return this._ThreadCategory.Entity;
		}
		set
		{
			ThreadCategory previousValue = this._ThreadCategory.Entity;
			if (((previousValue != value) 
						|| (this._ThreadCategory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ThreadCategory.Entity = null;
					previousValue.Threads.Remove(this);
				}
				this._ThreadCategory.Entity = value;
				if ((value != null))
				{
					value.Threads.Add(this);
					this._ThreadCategoryID = value.ThreadCategoryID;
				}
				else
				{
					this._ThreadCategoryID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ThreadCategory");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ThreadReplies(ThreadReply entity)
	{
		this.SendPropertyChanging();
		entity.Thread = this;
	}
	
	private void detach_ThreadReplies(ThreadReply entity)
	{
		this.SendPropertyChanging();
		entity.Thread = null;
	}
	
	private void attach_ThreadPrivateUsers(ThreadPrivateUser entity)
	{
		this.SendPropertyChanging();
		entity.Thread = this;
	}
	
	private void detach_ThreadPrivateUsers(ThreadPrivateUser entity)
	{
		this.SendPropertyChanging();
		entity.Thread = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.ThreadCategories")]
public partial class ThreadCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ThreadCategoryID;
	
	private int _ThreadGroupID;
	
	private string _Name;
	
	private string _Description;
	
	private System.Nullable<int> _TotalThreads;
	
	private System.Nullable<System.DateTime> _LastPostDate;
	
	private string _LastPostBy;
	
	private System.Nullable<int> _LastPostThreadID;
	
	private string _LastPostThread;
	
	private bool _IsActive;
	
	private EntitySet<Thread> _Threads;
	
	private EntityRef<ThreadGroup> _ThreadGroup;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadCategoryIDChanging(int value);
    partial void OnThreadCategoryIDChanged();
    partial void OnThreadGroupIDChanging(int value);
    partial void OnThreadGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTotalThreadsChanging(System.Nullable<int> value);
    partial void OnTotalThreadsChanged();
    partial void OnLastPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPostDateChanged();
    partial void OnLastPostByChanging(string value);
    partial void OnLastPostByChanged();
    partial void OnLastPostThreadIDChanging(System.Nullable<int> value);
    partial void OnLastPostThreadIDChanged();
    partial void OnLastPostThreadChanging(string value);
    partial void OnLastPostThreadChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
	
	public ThreadCategory()
	{
		this._Threads = new EntitySet<Thread>(new Action<Thread>(this.attach_Threads), new Action<Thread>(this.detach_Threads));
		this._ThreadGroup = default(EntityRef<ThreadGroup>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ThreadCategoryID
	{
		get
		{
			return this._ThreadCategoryID;
		}
		set
		{
			if ((this._ThreadCategoryID != value))
			{
				this.OnThreadCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadCategoryID = value;
				this.SendPropertyChanged("ThreadCategoryID");
				this.OnThreadCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadGroupID", DbType="Int NOT NULL")]
	public int ThreadGroupID
	{
		get
		{
			return this._ThreadGroupID;
		}
		set
		{
			if ((this._ThreadGroupID != value))
			{
				if (this._ThreadGroup.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnThreadGroupIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadGroupID = value;
				this.SendPropertyChanged("ThreadGroupID");
				this.OnThreadGroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalThreads", DbType="Int")]
	public System.Nullable<int> TotalThreads
	{
		get
		{
			return this._TotalThreads;
		}
		set
		{
			if ((this._TotalThreads != value))
			{
				this.OnTotalThreadsChanging(value);
				this.SendPropertyChanging();
				this._TotalThreads = value;
				this.SendPropertyChanged("TotalThreads");
				this.OnTotalThreadsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPostDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> LastPostDate
	{
		get
		{
			return this._LastPostDate;
		}
		set
		{
			if ((this._LastPostDate != value))
			{
				this.OnLastPostDateChanging(value);
				this.SendPropertyChanging();
				this._LastPostDate = value;
				this.SendPropertyChanged("LastPostDate");
				this.OnLastPostDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPostBy", DbType="VarChar(30)")]
	public string LastPostBy
	{
		get
		{
			return this._LastPostBy;
		}
		set
		{
			if ((this._LastPostBy != value))
			{
				this.OnLastPostByChanging(value);
				this.SendPropertyChanging();
				this._LastPostBy = value;
				this.SendPropertyChanged("LastPostBy");
				this.OnLastPostByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPostThreadID", DbType="Int")]
	public System.Nullable<int> LastPostThreadID
	{
		get
		{
			return this._LastPostThreadID;
		}
		set
		{
			if ((this._LastPostThreadID != value))
			{
				this.OnLastPostThreadIDChanging(value);
				this.SendPropertyChanging();
				this._LastPostThreadID = value;
				this.SendPropertyChanged("LastPostThreadID");
				this.OnLastPostThreadIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPostThread", DbType="VarChar(100)")]
	public string LastPostThread
	{
		get
		{
			return this._LastPostThread;
		}
		set
		{
			if ((this._LastPostThread != value))
			{
				this.OnLastPostThreadChanging(value);
				this.SendPropertyChanging();
				this._LastPostThread = value;
				this.SendPropertyChanged("LastPostThread");
				this.OnLastPostThreadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThreadCategory_Thread", Storage="_Threads", ThisKey="ThreadCategoryID", OtherKey="ThreadCategoryID")]
	public EntitySet<Thread> Threads
	{
		get
		{
			return this._Threads;
		}
		set
		{
			this._Threads.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThreadGroup_ThreadCategory", Storage="_ThreadGroup", ThisKey="ThreadGroupID", OtherKey="ThreadGroupID", IsForeignKey=true)]
	public ThreadGroup ThreadGroup
	{
		get
		{
			return this._ThreadGroup.Entity;
		}
		set
		{
			ThreadGroup previousValue = this._ThreadGroup.Entity;
			if (((previousValue != value) 
						|| (this._ThreadGroup.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ThreadGroup.Entity = null;
					previousValue.ThreadCategories.Remove(this);
				}
				this._ThreadGroup.Entity = value;
				if ((value != null))
				{
					value.ThreadCategories.Add(this);
					this._ThreadGroupID = value.ThreadGroupID;
				}
				else
				{
					this._ThreadGroupID = default(int);
				}
				this.SendPropertyChanged("ThreadGroup");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Threads(Thread entity)
	{
		this.SendPropertyChanging();
		entity.ThreadCategory = this;
	}
	
	private void detach_Threads(Thread entity)
	{
		this.SendPropertyChanging();
		entity.ThreadCategory = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.ThreadGroups")]
public partial class ThreadGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ThreadGroupID;
	
	private string _Name;
	
	private int _SortOrder;
	
	private EntitySet<ThreadCategory> _ThreadCategories;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadGroupIDChanging(int value);
    partial void OnThreadGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
	
	public ThreadGroup()
	{
		this._ThreadCategories = new EntitySet<ThreadCategory>(new Action<ThreadCategory>(this.attach_ThreadCategories), new Action<ThreadCategory>(this.detach_ThreadCategories));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ThreadGroupID
	{
		get
		{
			return this._ThreadGroupID;
		}
		set
		{
			if ((this._ThreadGroupID != value))
			{
				this.OnThreadGroupIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadGroupID = value;
				this.SendPropertyChanged("ThreadGroupID");
				this.OnThreadGroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL")]
	public int SortOrder
	{
		get
		{
			return this._SortOrder;
		}
		set
		{
			if ((this._SortOrder != value))
			{
				this.OnSortOrderChanging(value);
				this.SendPropertyChanging();
				this._SortOrder = value;
				this.SendPropertyChanged("SortOrder");
				this.OnSortOrderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThreadGroup_ThreadCategory", Storage="_ThreadCategories", ThisKey="ThreadGroupID", OtherKey="ThreadGroupID")]
	public EntitySet<ThreadCategory> ThreadCategories
	{
		get
		{
			return this._ThreadCategories;
		}
		set
		{
			this._ThreadCategories.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ThreadCategories(ThreadCategory entity)
	{
		this.SendPropertyChanging();
		entity.ThreadGroup = this;
	}
	
	private void detach_ThreadCategories(ThreadCategory entity)
	{
		this.SendPropertyChanging();
		entity.ThreadGroup = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.ThreadReply")]
public partial class ThreadReply : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ThreadReplyID;
	
	private int _ThreadID;
	
	private string _Username;
	
	private string _ReplyContents;
	
	private System.DateTime _DateReply;
	
	private EntityRef<Thread> _Thread;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadReplyIDChanging(long value);
    partial void OnThreadReplyIDChanged();
    partial void OnThreadIDChanging(int value);
    partial void OnThreadIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnReplyContentsChanging(string value);
    partial void OnReplyContentsChanged();
    partial void OnDateReplyChanging(System.DateTime value);
    partial void OnDateReplyChanged();
    #endregion
	
	public ThreadReply()
	{
		this._Thread = default(EntityRef<Thread>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadReplyID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ThreadReplyID
	{
		get
		{
			return this._ThreadReplyID;
		}
		set
		{
			if ((this._ThreadReplyID != value))
			{
				this.OnThreadReplyIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadReplyID = value;
				this.SendPropertyChanged("ThreadReplyID");
				this.OnThreadReplyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadID", DbType="Int NOT NULL")]
	public int ThreadID
	{
		get
		{
			return this._ThreadID;
		}
		set
		{
			if ((this._ThreadID != value))
			{
				if (this._Thread.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnThreadIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadID = value;
				this.SendPropertyChanged("ThreadID");
				this.OnThreadIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplyContents", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string ReplyContents
	{
		get
		{
			return this._ReplyContents;
		}
		set
		{
			if ((this._ReplyContents != value))
			{
				this.OnReplyContentsChanging(value);
				this.SendPropertyChanging();
				this._ReplyContents = value;
				this.SendPropertyChanged("ReplyContents");
				this.OnReplyContentsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateReply", DbType="DateTime NOT NULL")]
	public System.DateTime DateReply
	{
		get
		{
			return this._DateReply;
		}
		set
		{
			if ((this._DateReply != value))
			{
				this.OnDateReplyChanging(value);
				this.SendPropertyChanging();
				this._DateReply = value;
				this.SendPropertyChanged("DateReply");
				this.OnDateReplyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_ThreadReply", Storage="_Thread", ThisKey="ThreadID", OtherKey="ThreadID", IsForeignKey=true)]
	public Thread Thread
	{
		get
		{
			return this._Thread.Entity;
		}
		set
		{
			Thread previousValue = this._Thread.Entity;
			if (((previousValue != value) 
						|| (this._Thread.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Thread.Entity = null;
					previousValue.ThreadReplies.Remove(this);
				}
				this._Thread.Entity = value;
				if ((value != null))
				{
					value.ThreadReplies.Add(this);
					this._ThreadID = value.ThreadID;
				}
				else
				{
					this._ThreadID = default(int);
				}
				this.SendPropertyChanged("Thread");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.ThreadTypesUsers")]
public partial class ThreadTypesUser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ThreadTypeUserID;
	
	private int _ThreadTypeID;
	
	private string _Username;
	
	private EntityRef<ThreadType> _ThreadType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadTypeUserIDChanging(int value);
    partial void OnThreadTypeUserIDChanged();
    partial void OnThreadTypeIDChanging(int value);
    partial void OnThreadTypeIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
	
	public ThreadTypesUser()
	{
		this._ThreadType = default(EntityRef<ThreadType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadTypeUserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ThreadTypeUserID
	{
		get
		{
			return this._ThreadTypeUserID;
		}
		set
		{
			if ((this._ThreadTypeUserID != value))
			{
				this.OnThreadTypeUserIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadTypeUserID = value;
				this.SendPropertyChanged("ThreadTypeUserID");
				this.OnThreadTypeUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadTypeID", DbType="Int NOT NULL")]
	public int ThreadTypeID
	{
		get
		{
			return this._ThreadTypeID;
		}
		set
		{
			if ((this._ThreadTypeID != value))
			{
				if (this._ThreadType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnThreadTypeIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadTypeID = value;
				this.SendPropertyChanged("ThreadTypeID");
				this.OnThreadTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThreadType_ThreadTypesUser", Storage="_ThreadType", ThisKey="ThreadTypeID", OtherKey="ThreadTypeID", IsForeignKey=true)]
	public ThreadType ThreadType
	{
		get
		{
			return this._ThreadType.Entity;
		}
		set
		{
			ThreadType previousValue = this._ThreadType.Entity;
			if (((previousValue != value) 
						|| (this._ThreadType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ThreadType.Entity = null;
					previousValue.ThreadTypesUsers.Remove(this);
				}
				this._ThreadType.Entity = value;
				if ((value != null))
				{
					value.ThreadTypesUsers.Add(this);
					this._ThreadTypeID = value.ThreadTypeID;
				}
				else
				{
					this._ThreadTypeID = default(int);
				}
				this.SendPropertyChanged("ThreadType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.ThreadPrivateUsers")]
public partial class ThreadPrivateUser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ThreadUserID;
	
	private int _ThreadID;
	
	private string _Username;
	
	private EntityRef<Thread> _Thread;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadUserIDChanging(int value);
    partial void OnThreadUserIDChanged();
    partial void OnThreadIDChanging(int value);
    partial void OnThreadIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
	
	public ThreadPrivateUser()
	{
		this._Thread = default(EntityRef<Thread>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadUserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ThreadUserID
	{
		get
		{
			return this._ThreadUserID;
		}
		set
		{
			if ((this._ThreadUserID != value))
			{
				this.OnThreadUserIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadUserID = value;
				this.SendPropertyChanged("ThreadUserID");
				this.OnThreadUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadID", DbType="Int NOT NULL")]
	public int ThreadID
	{
		get
		{
			return this._ThreadID;
		}
		set
		{
			if ((this._ThreadID != value))
			{
				if (this._Thread.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnThreadIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadID = value;
				this.SendPropertyChanged("ThreadID");
				this.OnThreadIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_ThreadPrivateUser", Storage="_Thread", ThisKey="ThreadID", OtherKey="ThreadID", IsForeignKey=true)]
	public Thread Thread
	{
		get
		{
			return this._Thread.Entity;
		}
		set
		{
			Thread previousValue = this._Thread.Entity;
			if (((previousValue != value) 
						|| (this._Thread.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Thread.Entity = null;
					previousValue.ThreadPrivateUsers.Remove(this);
				}
				this._Thread.Entity = value;
				if ((value != null))
				{
					value.ThreadPrivateUsers.Add(this);
					this._ThreadID = value.ThreadID;
				}
				else
				{
					this._ThreadID = default(int);
				}
				this.SendPropertyChanged("Thread");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.ThreadView")]
public partial class ThreadView : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ThreadViewID;
	
	private int _ThreadID;
	
	private string _Username;
	
	private System.DateTime _DateViewed;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadViewIDChanging(int value);
    partial void OnThreadViewIDChanged();
    partial void OnThreadIDChanging(int value);
    partial void OnThreadIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDateViewedChanging(System.DateTime value);
    partial void OnDateViewedChanged();
    #endregion
	
	public ThreadView()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadViewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ThreadViewID
	{
		get
		{
			return this._ThreadViewID;
		}
		set
		{
			if ((this._ThreadViewID != value))
			{
				this.OnThreadViewIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadViewID = value;
				this.SendPropertyChanged("ThreadViewID");
				this.OnThreadViewIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadID", DbType="Int NOT NULL")]
	public int ThreadID
	{
		get
		{
			return this._ThreadID;
		}
		set
		{
			if ((this._ThreadID != value))
			{
				this.OnThreadIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadID = value;
				this.SendPropertyChanged("ThreadID");
				this.OnThreadIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateViewed", DbType="DateTime NOT NULL")]
	public System.DateTime DateViewed
	{
		get
		{
			return this._DateViewed;
		}
		set
		{
			if ((this._DateViewed != value))
			{
				this.OnDateViewedChanging(value);
				this.SendPropertyChanging();
				this._DateViewed = value;
				this.SendPropertyChanged("DateViewed");
				this.OnDateViewedChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.ThreadTypes")]
public partial class ThreadType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ThreadTypeID;
	
	private string _Title;
	
	private bool _IsPrivate;
	
	private EntitySet<ThreadTypesUser> _ThreadTypesUsers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadTypeIDChanging(int value);
    partial void OnThreadTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsPrivateChanging(bool value);
    partial void OnIsPrivateChanged();
    #endregion
	
	public ThreadType()
	{
		this._ThreadTypesUsers = new EntitySet<ThreadTypesUser>(new Action<ThreadTypesUser>(this.attach_ThreadTypesUsers), new Action<ThreadTypesUser>(this.detach_ThreadTypesUsers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ThreadTypeID
	{
		get
		{
			return this._ThreadTypeID;
		}
		set
		{
			if ((this._ThreadTypeID != value))
			{
				this.OnThreadTypeIDChanging(value);
				this.SendPropertyChanging();
				this._ThreadTypeID = value;
				this.SendPropertyChanged("ThreadTypeID");
				this.OnThreadTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrivate", DbType="Bit NOT NULL")]
	public bool IsPrivate
	{
		get
		{
			return this._IsPrivate;
		}
		set
		{
			if ((this._IsPrivate != value))
			{
				this.OnIsPrivateChanging(value);
				this.SendPropertyChanging();
				this._IsPrivate = value;
				this.SendPropertyChanged("IsPrivate");
				this.OnIsPrivateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThreadType_ThreadTypesUser", Storage="_ThreadTypesUsers", ThisKey="ThreadTypeID", OtherKey="ThreadTypeID")]
	public EntitySet<ThreadTypesUser> ThreadTypesUsers
	{
		get
		{
			return this._ThreadTypesUsers;
		}
		set
		{
			this._ThreadTypesUsers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ThreadTypesUsers(ThreadTypesUser entity)
	{
		this.SendPropertyChanging();
		entity.ThreadType = this;
	}
	
	private void detach_ThreadTypesUsers(ThreadTypesUser entity)
	{
		this.SendPropertyChanging();
		entity.ThreadType = null;
	}
}
#pragma warning restore 1591
