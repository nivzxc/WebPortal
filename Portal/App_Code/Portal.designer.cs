#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MySTIHQ110523")]
public partial class PortalDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertEventGame(EventGame instance);
  partial void UpdateEventGame(EventGame instance);
  partial void DeleteEventGame(EventGame instance);
  partial void InsertEventCategory(EventCategory instance);
  partial void UpdateEventCategory(EventCategory instance);
  partial void DeleteEventCategory(EventCategory instance);
  partial void InsertEventDivision(EventDivision instance);
  partial void UpdateEventDivision(EventDivision instance);
  partial void DeleteEventDivision(EventDivision instance);
  partial void InsertEvent(Event instance);
  partial void UpdateEvent(Event instance);
  partial void DeleteEvent(Event instance);
  partial void InsertScoringType(ScoringType instance);
  partial void UpdateScoringType(ScoringType instance);
  partial void DeleteScoringType(ScoringType instance);
  partial void InsertTeam(Team instance);
  partial void UpdateTeam(Team instance);
  partial void DeleteTeam(Team instance);
  partial void InsertTeamMember(TeamMember instance);
  partial void UpdateTeamMember(TeamMember instance);
  partial void DeleteTeamMember(TeamMember instance);
  partial void InsertAchievement(Achievement instance);
  partial void UpdateAchievement(Achievement instance);
  partial void DeleteAchievement(Achievement instance);
  partial void InsertActivity(Activity instance);
  partial void UpdateActivity(Activity instance);
  partial void DeleteActivity(Activity instance);
  partial void InsertEventGameOfficial(EventGameOfficial instance);
  partial void UpdateEventGameOfficial(EventGameOfficial instance);
  partial void DeleteEventGameOfficial(EventGameOfficial instance);
  partial void InsertEventGameTeamPlayer(EventGameTeamPlayer instance);
  partial void UpdateEventGameTeamPlayer(EventGameTeamPlayer instance);
  partial void DeleteEventGameTeamPlayer(EventGameTeamPlayer instance);
  partial void InsertEventGameTeam(EventGameTeam instance);
  partial void UpdateEventGameTeam(EventGameTeam instance);
  partial void DeleteEventGameTeam(EventGameTeam instance);
  partial void InsertEventTeamScore(EventTeamScore instance);
  partial void UpdateEventTeamScore(EventTeamScore instance);
  partial void DeleteEventTeamScore(EventTeamScore instance);
  #endregion
	
	public PortalDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MySTIHQ110523ConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public PortalDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PortalDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PortalDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PortalDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<EventGame> EventGames
	{
		get
		{
			return this.GetTable<EventGame>();
		}
	}
	
	public System.Data.Linq.Table<EventCategory> EventCategories
	{
		get
		{
			return this.GetTable<EventCategory>();
		}
	}
	
	public System.Data.Linq.Table<EventDivision> EventDivisions
	{
		get
		{
			return this.GetTable<EventDivision>();
		}
	}
	
	public System.Data.Linq.Table<Event> Events
	{
		get
		{
			return this.GetTable<Event>();
		}
	}
	
	public System.Data.Linq.Table<ScoringType> ScoringTypes
	{
		get
		{
			return this.GetTable<ScoringType>();
		}
	}
	
	public System.Data.Linq.Table<Team> Teams
	{
		get
		{
			return this.GetTable<Team>();
		}
	}
	
	public System.Data.Linq.Table<TeamMember> TeamMembers
	{
		get
		{
			return this.GetTable<TeamMember>();
		}
	}
	
	public System.Data.Linq.Table<Committee> Committees
	{
		get
		{
			return this.GetTable<Committee>();
		}
	}
	
	public System.Data.Linq.Table<Achievement> Achievements
	{
		get
		{
			return this.GetTable<Achievement>();
		}
	}
	
	public System.Data.Linq.Table<Activity> Activities
	{
		get
		{
			return this.GetTable<Activity>();
		}
	}
	
	public System.Data.Linq.Table<EventGameOfficial> EventGameOfficials
	{
		get
		{
			return this.GetTable<EventGameOfficial>();
		}
	}
	
	public System.Data.Linq.Table<EventGameTeamPlayer> EventGameTeamPlayers
	{
		get
		{
			return this.GetTable<EventGameTeamPlayer>();
		}
	}
	
	public System.Data.Linq.Table<EventGameTeam> EventGameTeams
	{
		get
		{
			return this.GetTable<EventGameTeam>();
		}
	}
	
	public System.Data.Linq.Table<EventTeamScore> EventTeamScores
	{
		get
		{
			return this.GetTable<EventTeamScore>();
		}
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Portal.InsertErrorLog")]
	public int InsertErrorLog([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Username", DbType="VarChar(30)")] string username, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Class", DbType="VarChar(100)")] string @class, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Method", DbType="VarChar(100)")] string method, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Details", DbType="Text")] string details)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, @class, method, details);
		return ((int)(result.ReturnValue));
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.EventGame")]
public partial class EventGame : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _GameID;
	
	private int _EventID;
	
	private char _GamePhase;
	
	private System.DateTime _StartDate;
	
	private System.DateTime _EndDate;
	
	private string _Location;
	
	private System.Nullable<int> _WinnerTeamID;
	
	private bool _IsFinished;
	
	private bool _IsActive;
	
	private string _CreatedBy;
	
	private System.Nullable<System.DateTime> _DateCreated;
	
	private string _ModifiedBy;
	
	private System.Nullable<System.DateTime> _DateModified;
	
	private EntitySet<EventGameOfficial> _EventGameOfficials;
	
	private EntitySet<EventGameTeamPlayer> _EventGameTeamPlayers;
	
	private EntitySet<EventGameTeam> _EventGameTeams;
	
	private EntityRef<Event> _Event;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnGamePhaseChanging(char value);
    partial void OnGamePhaseChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnWinnerTeamIDChanging(System.Nullable<int> value);
    partial void OnWinnerTeamIDChanged();
    partial void OnIsFinishedChanging(bool value);
    partial void OnIsFinishedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
	
	public EventGame()
	{
		this._EventGameOfficials = new EntitySet<EventGameOfficial>(new Action<EventGameOfficial>(this.attach_EventGameOfficials), new Action<EventGameOfficial>(this.detach_EventGameOfficials));
		this._EventGameTeamPlayers = new EntitySet<EventGameTeamPlayer>(new Action<EventGameTeamPlayer>(this.attach_EventGameTeamPlayers), new Action<EventGameTeamPlayer>(this.detach_EventGameTeamPlayers));
		this._EventGameTeams = new EntitySet<EventGameTeam>(new Action<EventGameTeam>(this.attach_EventGameTeams), new Action<EventGameTeam>(this.detach_EventGameTeams));
		this._Event = default(EntityRef<Event>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int GameID
	{
		get
		{
			return this._GameID;
		}
		set
		{
			if ((this._GameID != value))
			{
				this.OnGameIDChanging(value);
				this.SendPropertyChanging();
				this._GameID = value;
				this.SendPropertyChanged("GameID");
				this.OnGameIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
	public int EventID
	{
		get
		{
			return this._EventID;
		}
		set
		{
			if ((this._EventID != value))
			{
				if (this._Event.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventIDChanging(value);
				this.SendPropertyChanging();
				this._EventID = value;
				this.SendPropertyChanged("EventID");
				this.OnEventIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GamePhase", DbType="Char(1) NOT NULL")]
	public char GamePhase
	{
		get
		{
			return this._GamePhase;
		}
		set
		{
			if ((this._GamePhase != value))
			{
				this.OnGamePhaseChanging(value);
				this.SendPropertyChanging();
				this._GamePhase = value;
				this.SendPropertyChanged("GamePhase");
				this.OnGamePhaseChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
	public System.DateTime StartDate
	{
		get
		{
			return this._StartDate;
		}
		set
		{
			if ((this._StartDate != value))
			{
				this.OnStartDateChanging(value);
				this.SendPropertyChanging();
				this._StartDate = value;
				this.SendPropertyChanged("StartDate");
				this.OnStartDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
	public System.DateTime EndDate
	{
		get
		{
			return this._EndDate;
		}
		set
		{
			if ((this._EndDate != value))
			{
				this.OnEndDateChanging(value);
				this.SendPropertyChanging();
				this._EndDate = value;
				this.SendPropertyChanged("EndDate");
				this.OnEndDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(50)")]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinnerTeamID", DbType="Int")]
	public System.Nullable<int> WinnerTeamID
	{
		get
		{
			return this._WinnerTeamID;
		}
		set
		{
			if ((this._WinnerTeamID != value))
			{
				this.OnWinnerTeamIDChanging(value);
				this.SendPropertyChanging();
				this._WinnerTeamID = value;
				this.SendPropertyChanged("WinnerTeamID");
				this.OnWinnerTeamIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFinished", DbType="Bit NOT NULL")]
	public bool IsFinished
	{
		get
		{
			return this._IsFinished;
		}
		set
		{
			if ((this._IsFinished != value))
			{
				this.OnIsFinishedChanging(value);
				this.SendPropertyChanging();
				this._IsFinished = value;
				this.SendPropertyChanged("IsFinished");
				this.OnIsFinishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(30)")]
	public string CreatedBy
	{
		get
		{
			return this._CreatedBy;
		}
		set
		{
			if ((this._CreatedBy != value))
			{
				this.OnCreatedByChanging(value);
				this.SendPropertyChanging();
				this._CreatedBy = value;
				this.SendPropertyChanged("CreatedBy");
				this.OnCreatedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateCreated
	{
		get
		{
			return this._DateCreated;
		}
		set
		{
			if ((this._DateCreated != value))
			{
				this.OnDateCreatedChanging(value);
				this.SendPropertyChanging();
				this._DateCreated = value;
				this.SendPropertyChanged("DateCreated");
				this.OnDateCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="VarChar(30)")]
	public string ModifiedBy
	{
		get
		{
			return this._ModifiedBy;
		}
		set
		{
			if ((this._ModifiedBy != value))
			{
				this.OnModifiedByChanging(value);
				this.SendPropertyChanging();
				this._ModifiedBy = value;
				this.SendPropertyChanged("ModifiedBy");
				this.OnModifiedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateModified
	{
		get
		{
			return this._DateModified;
		}
		set
		{
			if ((this._DateModified != value))
			{
				this.OnDateModifiedChanging(value);
				this.SendPropertyChanging();
				this._DateModified = value;
				this.SendPropertyChanged("DateModified");
				this.OnDateModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventGame_EventGameOfficial", Storage="_EventGameOfficials", ThisKey="GameID", OtherKey="GameID")]
	public EntitySet<EventGameOfficial> EventGameOfficials
	{
		get
		{
			return this._EventGameOfficials;
		}
		set
		{
			this._EventGameOfficials.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventGame_EventGameTeamPlayer", Storage="_EventGameTeamPlayers", ThisKey="GameID", OtherKey="GameID")]
	public EntitySet<EventGameTeamPlayer> EventGameTeamPlayers
	{
		get
		{
			return this._EventGameTeamPlayers;
		}
		set
		{
			this._EventGameTeamPlayers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventGame_EventGameTeam", Storage="_EventGameTeams", ThisKey="GameID", OtherKey="GameID")]
	public EntitySet<EventGameTeam> EventGameTeams
	{
		get
		{
			return this._EventGameTeams;
		}
		set
		{
			this._EventGameTeams.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventGame", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.EventGames.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.EventGames.Add(this);
					this._EventID = value.EventID;
				}
				else
				{
					this._EventID = default(int);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EventGameOfficials(EventGameOfficial entity)
	{
		this.SendPropertyChanging();
		entity.EventGame = this;
	}
	
	private void detach_EventGameOfficials(EventGameOfficial entity)
	{
		this.SendPropertyChanging();
		entity.EventGame = null;
	}
	
	private void attach_EventGameTeamPlayers(EventGameTeamPlayer entity)
	{
		this.SendPropertyChanging();
		entity.EventGame = this;
	}
	
	private void detach_EventGameTeamPlayers(EventGameTeamPlayer entity)
	{
		this.SendPropertyChanging();
		entity.EventGame = null;
	}
	
	private void attach_EventGameTeams(EventGameTeam entity)
	{
		this.SendPropertyChanging();
		entity.EventGame = this;
	}
	
	private void detach_EventGameTeams(EventGameTeam entity)
	{
		this.SendPropertyChanging();
		entity.EventGame = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.EventCategories")]
public partial class EventCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EventCategoryID;
	
	private string _Name;
	
	private EntitySet<Event> _Events;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventCategoryIDChanging(int value);
    partial void OnEventCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public EventCategory()
	{
		this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int EventCategoryID
	{
		get
		{
			return this._EventCategoryID;
		}
		set
		{
			if ((this._EventCategoryID != value))
			{
				this.OnEventCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._EventCategoryID = value;
				this.SendPropertyChanged("EventCategoryID");
				this.OnEventCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventCategory_Event", Storage="_Events", ThisKey="EventCategoryID", OtherKey="EventCategoryID")]
	public EntitySet<Event> Events
	{
		get
		{
			return this._Events;
		}
		set
		{
			this._Events.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Events(Event entity)
	{
		this.SendPropertyChanging();
		entity.EventCategory = this;
	}
	
	private void detach_Events(Event entity)
	{
		this.SendPropertyChanging();
		entity.EventCategory = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.EventDivisions")]
public partial class EventDivision : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EventDivisionID;
	
	private string _Name;
	
	private EntitySet<Event> _Events;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventDivisionIDChanging(int value);
    partial void OnEventDivisionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public EventDivision()
	{
		this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDivisionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int EventDivisionID
	{
		get
		{
			return this._EventDivisionID;
		}
		set
		{
			if ((this._EventDivisionID != value))
			{
				this.OnEventDivisionIDChanging(value);
				this.SendPropertyChanging();
				this._EventDivisionID = value;
				this.SendPropertyChanged("EventDivisionID");
				this.OnEventDivisionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventDivision_Event", Storage="_Events", ThisKey="EventDivisionID", OtherKey="EventDivisionID")]
	public EntitySet<Event> Events
	{
		get
		{
			return this._Events;
		}
		set
		{
			this._Events.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Events(Event entity)
	{
		this.SendPropertyChanging();
		entity.EventDivision = this;
	}
	
	private void detach_Events(Event entity)
	{
		this.SendPropertyChanging();
		entity.EventDivision = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.Events")]
public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EventID;
	
	private int _ActivityID;
	
	private string _Name;
	
	private int _ScoringTypeID;
	
	private int _EventDivisionID;
	
	private int _EventCategoryID;
	
	private int _MaxPoint;
	
	private System.Nullable<int> _WinnerTeamID;
	
	private System.Nullable<int> _SortOrder;
	
	private bool _IsActive;
	
	private string _CreatedBy;
	
	private System.Nullable<System.DateTime> _DateCreated;
	
	private string _ModifiedBy;
	
	private System.Nullable<System.DateTime> _DateModified;
	
	private EntitySet<EventGame> _EventGames;
	
	private EntitySet<EventTeamScore> _EventTeamScores;
	
	private EntityRef<EventCategory> _EventCategory;
	
	private EntityRef<EventDivision> _EventDivision;
	
	private EntityRef<ScoringType> _ScoringType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnScoringTypeIDChanging(int value);
    partial void OnScoringTypeIDChanged();
    partial void OnEventDivisionIDChanging(int value);
    partial void OnEventDivisionIDChanged();
    partial void OnEventCategoryIDChanging(int value);
    partial void OnEventCategoryIDChanged();
    partial void OnMaxPointChanging(int value);
    partial void OnMaxPointChanged();
    partial void OnWinnerTeamIDChanging(System.Nullable<int> value);
    partial void OnWinnerTeamIDChanged();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
	
	public Event()
	{
		this._EventGames = new EntitySet<EventGame>(new Action<EventGame>(this.attach_EventGames), new Action<EventGame>(this.detach_EventGames));
		this._EventTeamScores = new EntitySet<EventTeamScore>(new Action<EventTeamScore>(this.attach_EventTeamScores), new Action<EventTeamScore>(this.detach_EventTeamScores));
		this._EventCategory = default(EntityRef<EventCategory>);
		this._EventDivision = default(EntityRef<EventDivision>);
		this._ScoringType = default(EntityRef<ScoringType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int EventID
	{
		get
		{
			return this._EventID;
		}
		set
		{
			if ((this._EventID != value))
			{
				this.OnEventIDChanging(value);
				this.SendPropertyChanging();
				this._EventID = value;
				this.SendPropertyChanged("EventID");
				this.OnEventIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityID", DbType="Int NOT NULL")]
	public int ActivityID
	{
		get
		{
			return this._ActivityID;
		}
		set
		{
			if ((this._ActivityID != value))
			{
				this.OnActivityIDChanging(value);
				this.SendPropertyChanging();
				this._ActivityID = value;
				this.SendPropertyChanged("ActivityID");
				this.OnActivityIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoringTypeID", DbType="Int NOT NULL")]
	public int ScoringTypeID
	{
		get
		{
			return this._ScoringTypeID;
		}
		set
		{
			if ((this._ScoringTypeID != value))
			{
				if (this._ScoringType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnScoringTypeIDChanging(value);
				this.SendPropertyChanging();
				this._ScoringTypeID = value;
				this.SendPropertyChanged("ScoringTypeID");
				this.OnScoringTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDivisionID", DbType="Int NOT NULL")]
	public int EventDivisionID
	{
		get
		{
			return this._EventDivisionID;
		}
		set
		{
			if ((this._EventDivisionID != value))
			{
				if (this._EventDivision.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventDivisionIDChanging(value);
				this.SendPropertyChanging();
				this._EventDivisionID = value;
				this.SendPropertyChanged("EventDivisionID");
				this.OnEventDivisionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCategoryID", DbType="Int NOT NULL")]
	public int EventCategoryID
	{
		get
		{
			return this._EventCategoryID;
		}
		set
		{
			if ((this._EventCategoryID != value))
			{
				if (this._EventCategory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._EventCategoryID = value;
				this.SendPropertyChanged("EventCategoryID");
				this.OnEventCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPoint", DbType="Int NOT NULL")]
	public int MaxPoint
	{
		get
		{
			return this._MaxPoint;
		}
		set
		{
			if ((this._MaxPoint != value))
			{
				this.OnMaxPointChanging(value);
				this.SendPropertyChanging();
				this._MaxPoint = value;
				this.SendPropertyChanged("MaxPoint");
				this.OnMaxPointChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinnerTeamID", DbType="Int")]
	public System.Nullable<int> WinnerTeamID
	{
		get
		{
			return this._WinnerTeamID;
		}
		set
		{
			if ((this._WinnerTeamID != value))
			{
				this.OnWinnerTeamIDChanging(value);
				this.SendPropertyChanging();
				this._WinnerTeamID = value;
				this.SendPropertyChanged("WinnerTeamID");
				this.OnWinnerTeamIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int")]
	public System.Nullable<int> SortOrder
	{
		get
		{
			return this._SortOrder;
		}
		set
		{
			if ((this._SortOrder != value))
			{
				this.OnSortOrderChanging(value);
				this.SendPropertyChanging();
				this._SortOrder = value;
				this.SendPropertyChanged("SortOrder");
				this.OnSortOrderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(30)")]
	public string CreatedBy
	{
		get
		{
			return this._CreatedBy;
		}
		set
		{
			if ((this._CreatedBy != value))
			{
				this.OnCreatedByChanging(value);
				this.SendPropertyChanging();
				this._CreatedBy = value;
				this.SendPropertyChanged("CreatedBy");
				this.OnCreatedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateCreated
	{
		get
		{
			return this._DateCreated;
		}
		set
		{
			if ((this._DateCreated != value))
			{
				this.OnDateCreatedChanging(value);
				this.SendPropertyChanging();
				this._DateCreated = value;
				this.SendPropertyChanged("DateCreated");
				this.OnDateCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="VarChar(30)")]
	public string ModifiedBy
	{
		get
		{
			return this._ModifiedBy;
		}
		set
		{
			if ((this._ModifiedBy != value))
			{
				this.OnModifiedByChanging(value);
				this.SendPropertyChanging();
				this._ModifiedBy = value;
				this.SendPropertyChanged("ModifiedBy");
				this.OnModifiedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateModified
	{
		get
		{
			return this._DateModified;
		}
		set
		{
			if ((this._DateModified != value))
			{
				this.OnDateModifiedChanging(value);
				this.SendPropertyChanging();
				this._DateModified = value;
				this.SendPropertyChanged("DateModified");
				this.OnDateModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventGame", Storage="_EventGames", ThisKey="EventID", OtherKey="EventID")]
	public EntitySet<EventGame> EventGames
	{
		get
		{
			return this._EventGames;
		}
		set
		{
			this._EventGames.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventTeamScore", Storage="_EventTeamScores", ThisKey="EventID", OtherKey="EventID")]
	public EntitySet<EventTeamScore> EventTeamScores
	{
		get
		{
			return this._EventTeamScores;
		}
		set
		{
			this._EventTeamScores.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventCategory_Event", Storage="_EventCategory", ThisKey="EventCategoryID", OtherKey="EventCategoryID", IsForeignKey=true)]
	public EventCategory EventCategory
	{
		get
		{
			return this._EventCategory.Entity;
		}
		set
		{
			EventCategory previousValue = this._EventCategory.Entity;
			if (((previousValue != value) 
						|| (this._EventCategory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EventCategory.Entity = null;
					previousValue.Events.Remove(this);
				}
				this._EventCategory.Entity = value;
				if ((value != null))
				{
					value.Events.Add(this);
					this._EventCategoryID = value.EventCategoryID;
				}
				else
				{
					this._EventCategoryID = default(int);
				}
				this.SendPropertyChanged("EventCategory");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventDivision_Event", Storage="_EventDivision", ThisKey="EventDivisionID", OtherKey="EventDivisionID", IsForeignKey=true)]
	public EventDivision EventDivision
	{
		get
		{
			return this._EventDivision.Entity;
		}
		set
		{
			EventDivision previousValue = this._EventDivision.Entity;
			if (((previousValue != value) 
						|| (this._EventDivision.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EventDivision.Entity = null;
					previousValue.Events.Remove(this);
				}
				this._EventDivision.Entity = value;
				if ((value != null))
				{
					value.Events.Add(this);
					this._EventDivisionID = value.EventDivisionID;
				}
				else
				{
					this._EventDivisionID = default(int);
				}
				this.SendPropertyChanged("EventDivision");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScoringType_Event", Storage="_ScoringType", ThisKey="ScoringTypeID", OtherKey="ScoringTypeID", IsForeignKey=true)]
	public ScoringType ScoringType
	{
		get
		{
			return this._ScoringType.Entity;
		}
		set
		{
			ScoringType previousValue = this._ScoringType.Entity;
			if (((previousValue != value) 
						|| (this._ScoringType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ScoringType.Entity = null;
					previousValue.Events.Remove(this);
				}
				this._ScoringType.Entity = value;
				if ((value != null))
				{
					value.Events.Add(this);
					this._ScoringTypeID = value.ScoringTypeID;
				}
				else
				{
					this._ScoringTypeID = default(int);
				}
				this.SendPropertyChanged("ScoringType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EventGames(EventGame entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_EventGames(EventGame entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
	
	private void attach_EventTeamScores(EventTeamScore entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_EventTeamScores(EventTeamScore entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.ScoringTypes")]
public partial class ScoringType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ScoringTypeID;
	
	private string _Name;
	
	private EntitySet<Event> _Events;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScoringTypeIDChanging(int value);
    partial void OnScoringTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public ScoringType()
	{
		this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoringTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ScoringTypeID
	{
		get
		{
			return this._ScoringTypeID;
		}
		set
		{
			if ((this._ScoringTypeID != value))
			{
				this.OnScoringTypeIDChanging(value);
				this.SendPropertyChanging();
				this._ScoringTypeID = value;
				this.SendPropertyChanged("ScoringTypeID");
				this.OnScoringTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScoringType_Event", Storage="_Events", ThisKey="ScoringTypeID", OtherKey="ScoringTypeID")]
	public EntitySet<Event> Events
	{
		get
		{
			return this._Events;
		}
		set
		{
			this._Events.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Events(Event entity)
	{
		this.SendPropertyChanging();
		entity.ScoringType = this;
	}
	
	private void detach_Events(Event entity)
	{
		this.SendPropertyChanging();
		entity.ScoringType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.Team")]
public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TeamID;
	
	private string _Name;
	
	private int _ColorID;
	
	private int _ActivityID;
	
	private string _Captain;
	
	private string _ViceCaptain;
	
	private string _TeamLogo;
	
	private bool _IsActive;
	
	private string _CreatedBy;
	
	private System.Nullable<System.DateTime> _DateCreated;
	
	private EntitySet<TeamMember> _TeamMembers;
	
	private EntitySet<EventGameTeamPlayer> _EventGameTeamPlayers;
	
	private EntitySet<EventGameTeam> _EventGameTeams;
	
	private EntitySet<EventTeamScore> _EventTeamScores;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnColorIDChanging(int value);
    partial void OnColorIDChanged();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    partial void OnCaptainChanging(string value);
    partial void OnCaptainChanged();
    partial void OnViceCaptainChanging(string value);
    partial void OnViceCaptainChanged();
    partial void OnTeamLogoChanging(string value);
    partial void OnTeamLogoChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
	
	public Team()
	{
		this._TeamMembers = new EntitySet<TeamMember>(new Action<TeamMember>(this.attach_TeamMembers), new Action<TeamMember>(this.detach_TeamMembers));
		this._EventGameTeamPlayers = new EntitySet<EventGameTeamPlayer>(new Action<EventGameTeamPlayer>(this.attach_EventGameTeamPlayers), new Action<EventGameTeamPlayer>(this.detach_EventGameTeamPlayers));
		this._EventGameTeams = new EntitySet<EventGameTeam>(new Action<EventGameTeam>(this.attach_EventGameTeams), new Action<EventGameTeam>(this.detach_EventGameTeams));
		this._EventTeamScores = new EntitySet<EventTeamScore>(new Action<EventTeamScore>(this.attach_EventTeamScores), new Action<EventTeamScore>(this.detach_EventTeamScores));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TeamID
	{
		get
		{
			return this._TeamID;
		}
		set
		{
			if ((this._TeamID != value))
			{
				this.OnTeamIDChanging(value);
				this.SendPropertyChanging();
				this._TeamID = value;
				this.SendPropertyChanged("TeamID");
				this.OnTeamIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorID", DbType="Int NOT NULL")]
	public int ColorID
	{
		get
		{
			return this._ColorID;
		}
		set
		{
			if ((this._ColorID != value))
			{
				this.OnColorIDChanging(value);
				this.SendPropertyChanging();
				this._ColorID = value;
				this.SendPropertyChanged("ColorID");
				this.OnColorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityID", DbType="Int NOT NULL")]
	public int ActivityID
	{
		get
		{
			return this._ActivityID;
		}
		set
		{
			if ((this._ActivityID != value))
			{
				this.OnActivityIDChanging(value);
				this.SendPropertyChanging();
				this._ActivityID = value;
				this.SendPropertyChanged("ActivityID");
				this.OnActivityIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Captain", DbType="VarChar(30)")]
	public string Captain
	{
		get
		{
			return this._Captain;
		}
		set
		{
			if ((this._Captain != value))
			{
				this.OnCaptainChanging(value);
				this.SendPropertyChanging();
				this._Captain = value;
				this.SendPropertyChanged("Captain");
				this.OnCaptainChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViceCaptain", DbType="VarChar(30)")]
	public string ViceCaptain
	{
		get
		{
			return this._ViceCaptain;
		}
		set
		{
			if ((this._ViceCaptain != value))
			{
				this.OnViceCaptainChanging(value);
				this.SendPropertyChanging();
				this._ViceCaptain = value;
				this.SendPropertyChanged("ViceCaptain");
				this.OnViceCaptainChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamLogo", DbType="VarChar(100)")]
	public string TeamLogo
	{
		get
		{
			return this._TeamLogo;
		}
		set
		{
			if ((this._TeamLogo != value))
			{
				this.OnTeamLogoChanging(value);
				this.SendPropertyChanging();
				this._TeamLogo = value;
				this.SendPropertyChanged("TeamLogo");
				this.OnTeamLogoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(30)")]
	public string CreatedBy
	{
		get
		{
			return this._CreatedBy;
		}
		set
		{
			if ((this._CreatedBy != value))
			{
				this.OnCreatedByChanging(value);
				this.SendPropertyChanging();
				this._CreatedBy = value;
				this.SendPropertyChanged("CreatedBy");
				this.OnCreatedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateCreated
	{
		get
		{
			return this._DateCreated;
		}
		set
		{
			if ((this._DateCreated != value))
			{
				this.OnDateCreatedChanging(value);
				this.SendPropertyChanging();
				this._DateCreated = value;
				this.SendPropertyChanged("DateCreated");
				this.OnDateCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamMember", Storage="_TeamMembers", ThisKey="TeamID", OtherKey="TeamID")]
	public EntitySet<TeamMember> TeamMembers
	{
		get
		{
			return this._TeamMembers;
		}
		set
		{
			this._TeamMembers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_EventGameTeamPlayer", Storage="_EventGameTeamPlayers", ThisKey="TeamID", OtherKey="TeamID")]
	public EntitySet<EventGameTeamPlayer> EventGameTeamPlayers
	{
		get
		{
			return this._EventGameTeamPlayers;
		}
		set
		{
			this._EventGameTeamPlayers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_EventGameTeam", Storage="_EventGameTeams", ThisKey="TeamID", OtherKey="TeamID")]
	public EntitySet<EventGameTeam> EventGameTeams
	{
		get
		{
			return this._EventGameTeams;
		}
		set
		{
			this._EventGameTeams.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_EventTeamScore", Storage="_EventTeamScores", ThisKey="TeamID", OtherKey="TeamID")]
	public EntitySet<EventTeamScore> EventTeamScores
	{
		get
		{
			return this._EventTeamScores;
		}
		set
		{
			this._EventTeamScores.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TeamMembers(TeamMember entity)
	{
		this.SendPropertyChanging();
		entity.Team = this;
	}
	
	private void detach_TeamMembers(TeamMember entity)
	{
		this.SendPropertyChanging();
		entity.Team = null;
	}
	
	private void attach_EventGameTeamPlayers(EventGameTeamPlayer entity)
	{
		this.SendPropertyChanging();
		entity.Team = this;
	}
	
	private void detach_EventGameTeamPlayers(EventGameTeamPlayer entity)
	{
		this.SendPropertyChanging();
		entity.Team = null;
	}
	
	private void attach_EventGameTeams(EventGameTeam entity)
	{
		this.SendPropertyChanging();
		entity.Team = this;
	}
	
	private void detach_EventGameTeams(EventGameTeam entity)
	{
		this.SendPropertyChanging();
		entity.Team = null;
	}
	
	private void attach_EventTeamScores(EventTeamScore entity)
	{
		this.SendPropertyChanging();
		entity.Team = this;
	}
	
	private void detach_EventTeamScores(EventTeamScore entity)
	{
		this.SendPropertyChanging();
		entity.Team = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.TeamMember")]
public partial class TeamMember : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TeamMemberID;
	
	private int _TeamID;
	
	private string _Username;
	
	private System.Nullable<int> _DraftNumber;
	
	private System.Nullable<int> _DraftOverall;
	
	private System.Nullable<char> _DraftCategory;
	
	private EntityRef<Team> _Team;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamMemberIDChanging(int value);
    partial void OnTeamMemberIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDraftNumberChanging(System.Nullable<int> value);
    partial void OnDraftNumberChanged();
    partial void OnDraftOverallChanging(System.Nullable<int> value);
    partial void OnDraftOverallChanged();
    partial void OnDraftCategoryChanging(System.Nullable<char> value);
    partial void OnDraftCategoryChanged();
    #endregion
	
	public TeamMember()
	{
		this._Team = default(EntityRef<Team>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamMemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TeamMemberID
	{
		get
		{
			return this._TeamMemberID;
		}
		set
		{
			if ((this._TeamMemberID != value))
			{
				this.OnTeamMemberIDChanging(value);
				this.SendPropertyChanging();
				this._TeamMemberID = value;
				this.SendPropertyChanged("TeamMemberID");
				this.OnTeamMemberIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
	public int TeamID
	{
		get
		{
			return this._TeamID;
		}
		set
		{
			if ((this._TeamID != value))
			{
				if (this._Team.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTeamIDChanging(value);
				this.SendPropertyChanging();
				this._TeamID = value;
				this.SendPropertyChanged("TeamID");
				this.OnTeamIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DraftNumber", DbType="Int")]
	public System.Nullable<int> DraftNumber
	{
		get
		{
			return this._DraftNumber;
		}
		set
		{
			if ((this._DraftNumber != value))
			{
				this.OnDraftNumberChanging(value);
				this.SendPropertyChanging();
				this._DraftNumber = value;
				this.SendPropertyChanged("DraftNumber");
				this.OnDraftNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DraftOverall", DbType="Int")]
	public System.Nullable<int> DraftOverall
	{
		get
		{
			return this._DraftOverall;
		}
		set
		{
			if ((this._DraftOverall != value))
			{
				this.OnDraftOverallChanging(value);
				this.SendPropertyChanging();
				this._DraftOverall = value;
				this.SendPropertyChanged("DraftOverall");
				this.OnDraftOverallChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DraftCategory", DbType="Char(1)")]
	public System.Nullable<char> DraftCategory
	{
		get
		{
			return this._DraftCategory;
		}
		set
		{
			if ((this._DraftCategory != value))
			{
				this.OnDraftCategoryChanging(value);
				this.SendPropertyChanging();
				this._DraftCategory = value;
				this.SendPropertyChanged("DraftCategory");
				this.OnDraftCategoryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamMember", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
	public Team Team
	{
		get
		{
			return this._Team.Entity;
		}
		set
		{
			Team previousValue = this._Team.Entity;
			if (((previousValue != value) 
						|| (this._Team.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Team.Entity = null;
					previousValue.TeamMembers.Remove(this);
				}
				this._Team.Entity = value;
				if ((value != null))
				{
					value.TeamMembers.Add(this);
					this._TeamID = value.TeamID;
				}
				else
				{
					this._TeamID = default(int);
				}
				this.SendPropertyChanged("Team");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.Committee")]
public partial class Committee
{
	
	private int _ActivityID;
	
	private string _Username;
	
	private System.Nullable<int> _SortOrder;
	
	public Committee()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityID", DbType="Int NOT NULL")]
	public int ActivityID
	{
		get
		{
			return this._ActivityID;
		}
		set
		{
			if ((this._ActivityID != value))
			{
				this._ActivityID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this._Username = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int")]
	public System.Nullable<int> SortOrder
	{
		get
		{
			return this._SortOrder;
		}
		set
		{
			if ((this._SortOrder != value))
			{
				this._SortOrder = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.Achievements")]
public partial class Achievement : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AchievementID;
	
	private int _ActivityID;
	
	private string _Username;
	
	private string _Achievement1;
	
	private string _CreatedBy;
	
	private System.Nullable<System.DateTime> _DateCreated;
	
	private string _ModifiedBy;
	
	private System.Nullable<System.DateTime> _DateModified;
	
	private EntityRef<Activity> _Activity;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAchievementIDChanging(int value);
    partial void OnAchievementIDChanged();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnAchievement1Changing(string value);
    partial void OnAchievement1Changed();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
	
	public Achievement()
	{
		this._Activity = default(EntityRef<Activity>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AchievementID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int AchievementID
	{
		get
		{
			return this._AchievementID;
		}
		set
		{
			if ((this._AchievementID != value))
			{
				this.OnAchievementIDChanging(value);
				this.SendPropertyChanging();
				this._AchievementID = value;
				this.SendPropertyChanged("AchievementID");
				this.OnAchievementIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityID", DbType="Int NOT NULL")]
	public int ActivityID
	{
		get
		{
			return this._ActivityID;
		}
		set
		{
			if ((this._ActivityID != value))
			{
				if (this._Activity.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnActivityIDChanging(value);
				this.SendPropertyChanging();
				this._ActivityID = value;
				this.SendPropertyChanged("ActivityID");
				this.OnActivityIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Achievement", Storage="_Achievement1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Achievement1
	{
		get
		{
			return this._Achievement1;
		}
		set
		{
			if ((this._Achievement1 != value))
			{
				this.OnAchievement1Changing(value);
				this.SendPropertyChanging();
				this._Achievement1 = value;
				this.SendPropertyChanged("Achievement1");
				this.OnAchievement1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(30)")]
	public string CreatedBy
	{
		get
		{
			return this._CreatedBy;
		}
		set
		{
			if ((this._CreatedBy != value))
			{
				this.OnCreatedByChanging(value);
				this.SendPropertyChanging();
				this._CreatedBy = value;
				this.SendPropertyChanged("CreatedBy");
				this.OnCreatedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateCreated
	{
		get
		{
			return this._DateCreated;
		}
		set
		{
			if ((this._DateCreated != value))
			{
				this.OnDateCreatedChanging(value);
				this.SendPropertyChanging();
				this._DateCreated = value;
				this.SendPropertyChanged("DateCreated");
				this.OnDateCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="VarChar(30)")]
	public string ModifiedBy
	{
		get
		{
			return this._ModifiedBy;
		}
		set
		{
			if ((this._ModifiedBy != value))
			{
				this.OnModifiedByChanging(value);
				this.SendPropertyChanging();
				this._ModifiedBy = value;
				this.SendPropertyChanged("ModifiedBy");
				this.OnModifiedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateModified
	{
		get
		{
			return this._DateModified;
		}
		set
		{
			if ((this._DateModified != value))
			{
				this.OnDateModifiedChanging(value);
				this.SendPropertyChanging();
				this._DateModified = value;
				this.SendPropertyChanged("DateModified");
				this.OnDateModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_Achievement", Storage="_Activity", ThisKey="ActivityID", OtherKey="ActivityID", IsForeignKey=true)]
	public Activity Activity
	{
		get
		{
			return this._Activity.Entity;
		}
		set
		{
			Activity previousValue = this._Activity.Entity;
			if (((previousValue != value) 
						|| (this._Activity.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Activity.Entity = null;
					previousValue.Achievements.Remove(this);
				}
				this._Activity.Entity = value;
				if ((value != null))
				{
					value.Achievements.Add(this);
					this._ActivityID = value.ActivityID;
				}
				else
				{
					this._ActivityID = default(int);
				}
				this.SendPropertyChanged("Activity");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.Activities")]
public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ActivityID;
	
	private string _Name;
	
	private string _Description;
	
	private bool _IsActive;
	
	private string _CreatedBy;
	
	private System.Nullable<System.DateTime> _DateCreated;
	
	private string _ModifiedBy;
	
	private System.Nullable<System.DateTime> _DateModified;
	
	private EntitySet<Achievement> _Achievements;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
	
	public Activity()
	{
		this._Achievements = new EntitySet<Achievement>(new Action<Achievement>(this.attach_Achievements), new Action<Achievement>(this.detach_Achievements));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ActivityID
	{
		get
		{
			return this._ActivityID;
		}
		set
		{
			if ((this._ActivityID != value))
			{
				this.OnActivityIDChanging(value);
				this.SendPropertyChanging();
				this._ActivityID = value;
				this.SendPropertyChanged("ActivityID");
				this.OnActivityIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(30)")]
	public string CreatedBy
	{
		get
		{
			return this._CreatedBy;
		}
		set
		{
			if ((this._CreatedBy != value))
			{
				this.OnCreatedByChanging(value);
				this.SendPropertyChanging();
				this._CreatedBy = value;
				this.SendPropertyChanged("CreatedBy");
				this.OnCreatedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateCreated
	{
		get
		{
			return this._DateCreated;
		}
		set
		{
			if ((this._DateCreated != value))
			{
				this.OnDateCreatedChanging(value);
				this.SendPropertyChanging();
				this._DateCreated = value;
				this.SendPropertyChanged("DateCreated");
				this.OnDateCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="VarChar(30)")]
	public string ModifiedBy
	{
		get
		{
			return this._ModifiedBy;
		}
		set
		{
			if ((this._ModifiedBy != value))
			{
				this.OnModifiedByChanging(value);
				this.SendPropertyChanging();
				this._ModifiedBy = value;
				this.SendPropertyChanged("ModifiedBy");
				this.OnModifiedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateModified
	{
		get
		{
			return this._DateModified;
		}
		set
		{
			if ((this._DateModified != value))
			{
				this.OnDateModifiedChanging(value);
				this.SendPropertyChanging();
				this._DateModified = value;
				this.SendPropertyChanged("DateModified");
				this.OnDateModifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_Achievement", Storage="_Achievements", ThisKey="ActivityID", OtherKey="ActivityID")]
	public EntitySet<Achievement> Achievements
	{
		get
		{
			return this._Achievements;
		}
		set
		{
			this._Achievements.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Achievements(Achievement entity)
	{
		this.SendPropertyChanging();
		entity.Activity = this;
	}
	
	private void detach_Achievements(Achievement entity)
	{
		this.SendPropertyChanging();
		entity.Activity = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.EventGameOfficials")]
public partial class EventGameOfficial : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _GameOfficialID;
	
	private int _GameID;
	
	private string _OfficialID;
	
	private EntityRef<EventGame> _EventGame;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameOfficialIDChanging(int value);
    partial void OnGameOfficialIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnOfficialIDChanging(string value);
    partial void OnOfficialIDChanged();
    #endregion
	
	public EventGameOfficial()
	{
		this._EventGame = default(EntityRef<EventGame>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameOfficialID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int GameOfficialID
	{
		get
		{
			return this._GameOfficialID;
		}
		set
		{
			if ((this._GameOfficialID != value))
			{
				this.OnGameOfficialIDChanging(value);
				this.SendPropertyChanging();
				this._GameOfficialID = value;
				this.SendPropertyChanged("GameOfficialID");
				this.OnGameOfficialIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
	public int GameID
	{
		get
		{
			return this._GameID;
		}
		set
		{
			if ((this._GameID != value))
			{
				if (this._EventGame.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGameIDChanging(value);
				this.SendPropertyChanging();
				this._GameID = value;
				this.SendPropertyChanged("GameID");
				this.OnGameIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficialID", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string OfficialID
	{
		get
		{
			return this._OfficialID;
		}
		set
		{
			if ((this._OfficialID != value))
			{
				this.OnOfficialIDChanging(value);
				this.SendPropertyChanging();
				this._OfficialID = value;
				this.SendPropertyChanged("OfficialID");
				this.OnOfficialIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventGame_EventGameOfficial", Storage="_EventGame", ThisKey="GameID", OtherKey="GameID", IsForeignKey=true)]
	public EventGame EventGame
	{
		get
		{
			return this._EventGame.Entity;
		}
		set
		{
			EventGame previousValue = this._EventGame.Entity;
			if (((previousValue != value) 
						|| (this._EventGame.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EventGame.Entity = null;
					previousValue.EventGameOfficials.Remove(this);
				}
				this._EventGame.Entity = value;
				if ((value != null))
				{
					value.EventGameOfficials.Add(this);
					this._GameID = value.GameID;
				}
				else
				{
					this._GameID = default(int);
				}
				this.SendPropertyChanged("EventGame");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.EventGameTeamPlayer")]
public partial class EventGameTeamPlayer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _GameTeamPlayerID;
	
	private int _GameID;
	
	private int _TeamID;
	
	private string _Username;
	
	private EntityRef<EventGame> _EventGame;
	
	private EntityRef<Team> _Team;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameTeamPlayerIDChanging(int value);
    partial void OnGameTeamPlayerIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
	
	public EventGameTeamPlayer()
	{
		this._EventGame = default(EntityRef<EventGame>);
		this._Team = default(EntityRef<Team>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameTeamPlayerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int GameTeamPlayerID
	{
		get
		{
			return this._GameTeamPlayerID;
		}
		set
		{
			if ((this._GameTeamPlayerID != value))
			{
				this.OnGameTeamPlayerIDChanging(value);
				this.SendPropertyChanging();
				this._GameTeamPlayerID = value;
				this.SendPropertyChanged("GameTeamPlayerID");
				this.OnGameTeamPlayerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
	public int GameID
	{
		get
		{
			return this._GameID;
		}
		set
		{
			if ((this._GameID != value))
			{
				if (this._EventGame.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGameIDChanging(value);
				this.SendPropertyChanging();
				this._GameID = value;
				this.SendPropertyChanged("GameID");
				this.OnGameIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
	public int TeamID
	{
		get
		{
			return this._TeamID;
		}
		set
		{
			if ((this._TeamID != value))
			{
				if (this._Team.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTeamIDChanging(value);
				this.SendPropertyChanging();
				this._TeamID = value;
				this.SendPropertyChanged("TeamID");
				this.OnTeamIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventGame_EventGameTeamPlayer", Storage="_EventGame", ThisKey="GameID", OtherKey="GameID", IsForeignKey=true)]
	public EventGame EventGame
	{
		get
		{
			return this._EventGame.Entity;
		}
		set
		{
			EventGame previousValue = this._EventGame.Entity;
			if (((previousValue != value) 
						|| (this._EventGame.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EventGame.Entity = null;
					previousValue.EventGameTeamPlayers.Remove(this);
				}
				this._EventGame.Entity = value;
				if ((value != null))
				{
					value.EventGameTeamPlayers.Add(this);
					this._GameID = value.GameID;
				}
				else
				{
					this._GameID = default(int);
				}
				this.SendPropertyChanged("EventGame");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_EventGameTeamPlayer", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
	public Team Team
	{
		get
		{
			return this._Team.Entity;
		}
		set
		{
			Team previousValue = this._Team.Entity;
			if (((previousValue != value) 
						|| (this._Team.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Team.Entity = null;
					previousValue.EventGameTeamPlayers.Remove(this);
				}
				this._Team.Entity = value;
				if ((value != null))
				{
					value.EventGameTeamPlayers.Add(this);
					this._TeamID = value.TeamID;
				}
				else
				{
					this._TeamID = default(int);
				}
				this.SendPropertyChanged("Team");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.EventGameTeam")]
public partial class EventGameTeam : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _GameTeamID;
	
	private int _GameID;
	
	private int _TeamID;
	
	private System.Nullable<int> _Rank;
	
	private System.Nullable<double> _Score;
	
	private EntityRef<EventGame> _EventGame;
	
	private EntityRef<Team> _Team;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameTeamIDChanging(int value);
    partial void OnGameTeamIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnRankChanging(System.Nullable<int> value);
    partial void OnRankChanged();
    partial void OnScoreChanging(System.Nullable<double> value);
    partial void OnScoreChanged();
    #endregion
	
	public EventGameTeam()
	{
		this._EventGame = default(EntityRef<EventGame>);
		this._Team = default(EntityRef<Team>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameTeamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int GameTeamID
	{
		get
		{
			return this._GameTeamID;
		}
		set
		{
			if ((this._GameTeamID != value))
			{
				this.OnGameTeamIDChanging(value);
				this.SendPropertyChanging();
				this._GameTeamID = value;
				this.SendPropertyChanged("GameTeamID");
				this.OnGameTeamIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
	public int GameID
	{
		get
		{
			return this._GameID;
		}
		set
		{
			if ((this._GameID != value))
			{
				if (this._EventGame.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGameIDChanging(value);
				this.SendPropertyChanging();
				this._GameID = value;
				this.SendPropertyChanged("GameID");
				this.OnGameIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
	public int TeamID
	{
		get
		{
			return this._TeamID;
		}
		set
		{
			if ((this._TeamID != value))
			{
				if (this._Team.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTeamIDChanging(value);
				this.SendPropertyChanging();
				this._TeamID = value;
				this.SendPropertyChanged("TeamID");
				this.OnTeamIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="Int")]
	public System.Nullable<int> Rank
	{
		get
		{
			return this._Rank;
		}
		set
		{
			if ((this._Rank != value))
			{
				this.OnRankChanging(value);
				this.SendPropertyChanging();
				this._Rank = value;
				this.SendPropertyChanged("Rank");
				this.OnRankChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Float")]
	public System.Nullable<double> Score
	{
		get
		{
			return this._Score;
		}
		set
		{
			if ((this._Score != value))
			{
				this.OnScoreChanging(value);
				this.SendPropertyChanging();
				this._Score = value;
				this.SendPropertyChanged("Score");
				this.OnScoreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventGame_EventGameTeam", Storage="_EventGame", ThisKey="GameID", OtherKey="GameID", IsForeignKey=true)]
	public EventGame EventGame
	{
		get
		{
			return this._EventGame.Entity;
		}
		set
		{
			EventGame previousValue = this._EventGame.Entity;
			if (((previousValue != value) 
						|| (this._EventGame.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EventGame.Entity = null;
					previousValue.EventGameTeams.Remove(this);
				}
				this._EventGame.Entity = value;
				if ((value != null))
				{
					value.EventGameTeams.Add(this);
					this._GameID = value.GameID;
				}
				else
				{
					this._GameID = default(int);
				}
				this.SendPropertyChanged("EventGame");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_EventGameTeam", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
	public Team Team
	{
		get
		{
			return this._Team.Entity;
		}
		set
		{
			Team previousValue = this._Team.Entity;
			if (((previousValue != value) 
						|| (this._Team.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Team.Entity = null;
					previousValue.EventGameTeams.Remove(this);
				}
				this._Team.Entity = value;
				if ((value != null))
				{
					value.EventGameTeams.Add(this);
					this._TeamID = value.TeamID;
				}
				else
				{
					this._TeamID = default(int);
				}
				this.SendPropertyChanged("Team");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="Portal.EventTeamScore")]
public partial class EventTeamScore : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EventTeamScoreID;
	
	private int _EventID;
	
	private int _TeamID;
	
	private System.Nullable<int> _Rank;
	
	private System.Nullable<int> _Score;
	
	private EntityRef<Event> _Event;
	
	private EntityRef<Team> _Team;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventTeamScoreIDChanging(int value);
    partial void OnEventTeamScoreIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnRankChanging(System.Nullable<int> value);
    partial void OnRankChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    #endregion
	
	public EventTeamScore()
	{
		this._Event = default(EntityRef<Event>);
		this._Team = default(EntityRef<Team>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTeamScoreID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int EventTeamScoreID
	{
		get
		{
			return this._EventTeamScoreID;
		}
		set
		{
			if ((this._EventTeamScoreID != value))
			{
				this.OnEventTeamScoreIDChanging(value);
				this.SendPropertyChanging();
				this._EventTeamScoreID = value;
				this.SendPropertyChanged("EventTeamScoreID");
				this.OnEventTeamScoreIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
	public int EventID
	{
		get
		{
			return this._EventID;
		}
		set
		{
			if ((this._EventID != value))
			{
				if (this._Event.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventIDChanging(value);
				this.SendPropertyChanging();
				this._EventID = value;
				this.SendPropertyChanged("EventID");
				this.OnEventIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
	public int TeamID
	{
		get
		{
			return this._TeamID;
		}
		set
		{
			if ((this._TeamID != value))
			{
				if (this._Team.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTeamIDChanging(value);
				this.SendPropertyChanging();
				this._TeamID = value;
				this.SendPropertyChanged("TeamID");
				this.OnTeamIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="Int")]
	public System.Nullable<int> Rank
	{
		get
		{
			return this._Rank;
		}
		set
		{
			if ((this._Rank != value))
			{
				this.OnRankChanging(value);
				this.SendPropertyChanging();
				this._Rank = value;
				this.SendPropertyChanged("Rank");
				this.OnRankChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
	public System.Nullable<int> Score
	{
		get
		{
			return this._Score;
		}
		set
		{
			if ((this._Score != value))
			{
				this.OnScoreChanging(value);
				this.SendPropertyChanging();
				this._Score = value;
				this.SendPropertyChanged("Score");
				this.OnScoreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventTeamScore", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.EventTeamScores.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.EventTeamScores.Add(this);
					this._EventID = value.EventID;
				}
				else
				{
					this._EventID = default(int);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_EventTeamScore", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
	public Team Team
	{
		get
		{
			return this._Team.Entity;
		}
		set
		{
			Team previousValue = this._Team.Entity;
			if (((previousValue != value) 
						|| (this._Team.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Team.Entity = null;
					previousValue.EventTeamScores.Remove(this);
				}
				this._Team.Entity = value;
				if ((value != null))
				{
					value.EventTeamScores.Add(this);
					this._TeamID = value.TeamID;
				}
				else
				{
					this._TeamID = default(int);
				}
				this.SendPropertyChanged("Team");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
